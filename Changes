- fix longstanding t_rot bug shown in https://perlmonks.org/?node_id=683514
- add inflateN
- fix MatrixOps::inv failing on native-complex (#403) - thanks @KJ7LNW for report
- fix MatrixOps::identity losing class of invocant if ndarray (#401) - thanks @pryrt for report
- change PP-generated XS PROTOTYPES to DISABLE
- allow [o] on OtherPars (#362)
- fix conv2d to allow complex arguments (#407) - thanks @wlmb
- Add complex support to interpolate (#408) - thanks @KJ7LNW
- Refactor PDL::IO::Browser curses detection to additionally use ncurses*-config (#412)
- Add File::Which as a configure dependency (previously runtime only) (#412)

2.080 2022-05-28
- make IO::STL work on big-endian systems (#394) - thanks @sebastic for report
- pp_add_macros macros now receive list of args split like C preprocessor
- most of PDL::VectorValued into Primitive/Slices - thanks @moocow-the-bovine
- depend on Text::Balanced 2.05, removing monkeypatch (#396)
- make {w,}histogram throw error not segfault when min == max (#397) - thanks @fantasma13 for report

2.079 2022-05-03
- move Math::badmask to Bad
- PDL.propagate_badflag propagates both to parents AND children, sets flag itself
- Ops::assgn now propagates its badflag without needing to set output badflag
- remove FindBadStatusCode
- remove redundant use of CopyBadStatusCode
- PDL.null deprecated, doesn't allocate pdl.sv now
- PDL::Dataflow doc updated
- add TriD::trigrid3d
- add PDL::IO::STL
- replace *_RECURSE_GUARD macros which use process-global variable, causing problems if multi-thread, with stack parameters - thanks @marioroy for report
- add Primitive::{cmp,eq}vec
- add Image2D::crop
- PP typemap-search includes dirs above

2.078 2022-04-10
- Ops::atan2 etc have default swap param
- fix Transform::Cartography::t_carree spelling (compat alias created)
- add Transform::Cartography::t_raster2{fits,float}
- Transform::inverse on transform without an inverse now fatal error
- fix Transform::t_fits bug which ignored ignore_rgb for making inverse
- TriD::GL now more resilient and exceptions don't leave GL broken
- add Transform::Cartography::earth_shape
- back-port Text::Balanced fixes to improve NiceSlice (#383)
- fix long-standing "harmful" scaling of output with dim 1 (#392)
- fix segfault bug for Ufunc::{odd,}{pct,med}over with empty - thanks @nerdstrike for report
- struct pdl add "value" field for data that fits there, avoiding separate memory-management (#358)
- copy over the sensible method-name aliases for PDL::Complex from PDL::LinearAlgebra

2.077 2022-03-16
- Ufunc::{min,max}over{,_ind} behaviour for NaNs fixed to match docs
- Ufunc::{min,max}over_n_ind can handle badvals
- single badval as boolean is now an error (#388)
- IO::FlexRaw::readflex can take last dim as undef (#322)
- add IO::(Fast|Flex)Raw::glue\L\1 (#322)
- PDL::Demos::Routines replaced with PDL::Demos, update demos (#42)
- switch pdl_destroy to use mg_free not SvOBJECT_off, needed by Perl ithreads (#385)
- implement Ctrl-C handling in perldl (#269)
- add with_time command to shells
- fix shell history getting lost if OpenGL loaded before listed (#337)
- fix TriD objects being off-centre (#337)
- fix Primitive::which_both docs to match behaviour
- add Primitive::where_both
- PP now checks data pointers for NULL if nvals > 0 except in RedoDimsCode
- add Core::dup{,N}

2.076 2022-02-25
- fix long-standing bug in dice that broke with PDL subclasses (#363)
- remove docs for {type,map}fld
- splitdim throws exception if non-divisible nsp given, can give negative dim
- changed matmult tilesize from 64 to 8*sizeof(double)/sizeof(gentype) - performance increases 50%, comparable to reference LAPACK
- fix NiceSlice regression - thanks @fantasma13 for report

2.075 2022-02-19
- fix false-positive heredoc in bitshift (#383) - thanks @d-lamb for report
- threading now called broadcasting (compat aliases created)
- fix 2.057_01 regression in {broadcast,thread}_define - thanks @eserte for report
- fix regression of append allowing type upgrade to second argument's type
- add empty() function
- fix when readdata functions return error (#356)
- RedoDimsCode can now use $SIZE(other_index) (#386)

2.074 2022-02-08
- fix PDL::Complex->null stringify error

2.073 2022-02-07
- PDL::Complex no longer undefs PDL::i
- passing null as input param now an error
- can now unify Code and BadCode into Code, and use PDL_IF_BAD() or #ifdef PDL_BAD_CODE
- add macros PDL_IF_GENTYPE_{REAL,INTEGER,UNSIGNED}(iftrue,iffalse) in Code
- fix IO::IDL (#381) - thanks @YuryPakhomov for report and test data
- fix [t] Pars with multi-thread; now cannot be passed as params (#382) - thanks @d-lamb for report

2.072 2022-01-30
- fix bug in qsortveci that broke PDL::VectorValued - thanks @zmughal for report

2.071 2022-01-29
- fix segfault bug in qsortvec - thanks @zmughal for investigation and report

2.070 2022-01-28
- add GIS::Proj::proj_version
- fix Transform::Proj4 tests to work with ortho results in PROJ >6.3.1 (assumed 8+)

2.069 2022-01-28
- PDL::NiceSlice override Text::Balanced::extract_multiple for performance

2.068_07 2022-01-28
- fix PDL::new bug in creating longlong (#378) - thanks @zmughal

2.068_06 2022-01-25
- fix PDL::new bug in creating longdouble (#374) - thanks @zmughal

2.068_05 2022-01-23
- build and test-false-negative-avoidance improvements

2.068_04 2022-01-22
- fix bug in memory allocation revealed on 32-bit

2.068_03 2022-01-20
- improve GSL version parsing - thanks @d-lamb
- Slatec to work again with 32-bit pointer size
- got_complex_version to check for long-double version to reduce build fails

2.068_02 2022-01-17
- Slatec 64-bit safe

2.068_01 2022-01-16
- Minuit 64-bit safe
- Slatec 64-bit improvements
- fix IO::FITS::rfits with variable-length data to work on bigendian

2.068 2022-01-14
- add pdl.nbytes
- specify SByte as explicitly "signed" as C99 allows unsigned if not say

2.067 2022-01-13
- remove PDL.grow from API
- remove $PDL::BIGPDL check for 1GB data
- fix 2.064 regression in $pdl->sequence - thanks @moocow-the-bovine
- PDL_CORE_VERSION 20

2.066 2022-01-10
- re-release without erroneous OpenGL::GLUT requires dep

2.065 2022-01-10
- switch TriD stuff to use OpenGL::GLUT for GLUT functionality
- GLUT TriD now reopens the window on next draw if was closed
- bifuncs like Ops::plus no longer need explicit swap parameter
- add C "PDL_Value" union type
- replace Convert::UU as dep with own code - thanks @sebastic for suggestion

2.064 2022-01-08
- enable perldl -glut on Win32

2.063_05 2022-01-08
- rename PDL::get_trans to trans_parent
- add PDL::Trans::{parents,children}
- rename pdl.child_transes to trans_children, add PDL::trans_children

2.063_04 2022-01-07
- pdlpp_mkgen runs .pd files in correct dir
- PDL.changesoon removed
- longlong default bad value now LLONG_MIN
- add signed byte (SB), unsigned long (UL) and longlong (ULL)
- add Bad::locf - thanks @kmx
- fix qsortvec* with bad values - thanks @d-lamb for report
- hook @drzowie-created RICE_1 compression up to wfits
- PDL::FFT now thread- and 64-bit-safe
- sclr to croak if called on multi-element array
- $TXYZ() macros fatal error if any of trans's GenericTypes not dealt with
- add long double both real (LD) and complex (CLD)
- NiceSlice uses the better Filter::Simple version as is now quick
- IO::Pic::wpic assume PBM can do 16-bits per sample as exists since 2003
- added PDL::Graphics, an overview of modules - thanks @mascip
- add Type::bswap
- IO::Pnm::{r,w}pnm can work on open file-handle
- IO::Pic::rmpeg added
- IO::Pic::rpic will return an n+1-dim ndarray if multiple images in file
- set_datatype (and PDL.converttype) now badval-aware
- add dependency on File::Which - thanks @zmughal
- pp_addpm automatically adds line-number from .pd to aid debugging
- PDL_Indx now a C ptrdiff_t, PDL_*Long now C {,u}int{32,64}_t to simplify config
- xvals etc now return at least a double
- Primitive::{fibonacci,axisvalues} not output-only but can work inplace

2.063_03 2021-12-23
- add pp_add_macros

2.063_02 2021-12-23
- add PDL.scalar
- add dummy pdl_pthread_main_thread for when no POSIX threads
- PDL.pdlnew to make a null pdl except not ALLOCATED
- stopped disabling pthreads on BSD

2.063_01 2021-12-21
- define, use PDL_REPRINCS
- PDL.{pdlnew,null,get_thread{dims,offsp{,_int}}} return NULL on error, not croak
- PDL.{trans_check_pdls,barf_if_error,error_accumulate}
- PDL.{magic_get_thread,{start,iter}threadloop} return -1 not die
- PDL.sever returns pdl_error not pdl * (Perl interface stays same)
- ANYVAL_ISBAD interface change
- fix ->at with pdl having non-default badvalue
- macro args can contain () eg $CROAK("%d", $SIZE(n))
- remove Slices::flowconvert
- PDL_ISBAD macro
- bad values of NaN now work right with $ISBAD() etc
- rename PDL.slice_args_parse to slice_args_parse_sv
- stop redodims leaking memory
- remove PDL.{dim_checks,get,put_offs} from Core
- rename PDL.children_changesoon to changesoon
- GIS::Proj inplace funcs set output bad if any input bad
- switched GIS::Proj to PROJ 6 API
- PDL.make_error{,_simple} for error-handling instead of croak et al - can't just return as generated functions no longer return void
- remove PDL.vaffinechanged
- fix zeroes() regression from 2.057_01 where zeroes($byte_pdl) would give double
- make PDL::Compression functions thread-safe
- remove Core::set_dataflow_b
- PDL.affine_new to take PDL_Indx* not SV*
- PDL_CORE_VERSION 19

2.063 2021-11-19
- PDL::Core::seed - thanks @zmughal

2.062 2021-11-19
- Primitive::srand() added, random() calls if not done yet - thanks @whumann for report
- Primitive::random() et al to use xoroshiro256plus instead of Perl's rand()
- Primitive::random() et al able to pthread

2.061 2021-11-11
- native-complex ->re and ->im methods do two-way dataflow
- fix pp_line_numbers change not being done right for .pm

2.060 2021-11-08
- work around more recent GCC not tgmath-ing log10 for complex

2.059 2021-11-08
- removed supplied Cephes functions that C99 mandates
- Ops,Math to use tgmath.h not own $T() stuff
- MatrixOps switch from bespoke SSLib complex to C99 native complex
- Core::online_cpus, used to set_autopthread_targ if no env var set

2.058 2021-11-06
- no changes from 2.057_05

2.057_05 2021-11-06
- (DO{COMP,PRIV})DIMS -> more-accurate ${1}ALLOC
- stop Pars or OtherPars called "I" - thanks Judd Taylor for report
- pp_line_numbers restores line numbering after end of given text
- allow "CTYPE var[]" as OtherPars, add T_PDL_DIMLIST to typemap
- pnminraw etc to take $filehandle not just name of glob

2.057_04 2021-10-12
- remove legacy pdl_create
- remove long-deprecated nslice
- multi-C only updates files that have changed, for faster rebuilds
- because OtherPars are now in a separate struct, no restriction on names
- mslice is just an alias to Slices::slice
- allow any pointer including pdl * as OtherPars

2.057_03 2021-10-02
- remove IO::Misc::rdsa, untested since PDL 1.9 and needing non-CPAN "DSA" module
- throw error when XS called with inplace input but also explicit output
- OtherPars to separate struct; pdl_transvtable.structsize of that
- allow external .pd to opt-in to one-C-file-per-function

2.057_02 2021-09-26
- split internal .pd into one C file per pp_def function allowing parallel build
- tidy various modules so they don't get symbol clashes from that

2.057_01 2021-09-24
- fix pp_add_boot to remove any blank lines (such as added by pp_line_numbers)
- GSL::CDF now uses barf() on error, not GSL default of core-dump
- propagate_badflag only recurses with children that had different value
- Example/doc-pp script to use GraphViz2 to show pp_def key dependencies
- affineinternal only read/write when both parent & child physical
- allow zero-length ndarray as slice index even for length-1 dim - thanks @trevcs for report (SF#443, GH#229)
- replace some malloc/free with smalloc to not leak on exception
- replace whole genpp infrastructure with generated C macro
- remove Core.twod, requires recompile
- remove PDL::iscontig
- move all non-SV-using C out of Core.xs to C files
- remove unused pdl_{copy,unpackdims} including from Core struct
- move extra checks and functionality from Core.xs setdims into pdl_setdims, call that
- fix off-by-one error in nthreadids
- pthreading can be over non-divisible number of threads
- remove Core.qsort_*
- zeroes now quicker as only does memset, not assgn operation
- add $PPSYM()
- change API of PDL->converttype to remove obsolete flag
- remove unused "copy" mechanism for pdl_trans
- rename (struct pdl).trans -> trans_parent for comprehensibility
- now an error if CopyBadStatusCode uses $PRIV(bvalflag)
- fix setnantobad doc to match behaviour fixed in 2.040, add setnonfinitetobad
- Inplace now throws error for >2 elements in array-ref
- remove oslice (after 8 years) and never-used Slices::{s_,}identity
- all PDL operations now have a C function interface called pdl_(name)_run
- add setinftobad - thanks @alex-prusevich for suggestion
- PDL_CORE_VERSION 18

2.057 2021-08-13
- restore PDL_MAGIC_DELETEDATA mechanism
- PDL_CORE_VERSION 17

2.056 2021-08-08
- remove (very-)long-deprecated mmap code in favour of File::Map
- remove obsolete Core members, update Core version
- remove unnecessary Core members to reduce struct size and increase cacheability
- removed legacy mmap implementation including PDL_MAGIC_DELETEDATA mechanism
- remove PDL::Constants::{I,J} which returned a PDL::Complex - use PDL::i()
- n{good,bad}over, sum, prod, *pct, etc now return ndarrays not Perl values
- make PDL::IO::FastRaw::mapfraw not allocate RAM
- PDL_CORE_VERSION 16

2.055 2021-08-03
- officially deprecate PDL::Complex in favour of "native complex" - thanks @wlmb for suggestion
- throw exception for [phys] Pars with multi-used, non-matching dim of 1 instead of silent repeat

2.054 2021-07-26
- add PDL::Core::at_c as back-compat alias for at_bad_c

2.053 2021-07-26
- work around P:G:Limits::round_pow failing tests with uselongdouble

2.052 2021-07-04
- fix IO::Storable bug - thanks @viy2 for report
- add PDL::Opt::Simplex example - thanks @ewheelerinc
- allow POD in pp_line_numbers again - thanks @fantasma13 for report

2.051 2021-06-14
- also use $Config{cppflags} to find GD includes - thanks @d-lamb for report

2.050 2021-06-02
- fix pdlperl.h build bug - thanks @jplesnik for report

2.049 2021-05-31
- PDL::Complex->from_native / as_native
- zap obsolete MatrixOps::eigen_c
- MatrixOps::identity now preserves higher dims on multi-dim input
- copy now copies ndarray and leaves original ndarray's inplace alone
- MatrixOps::lu_decomp now preserves inplace flag on input
- MatrixOps::lu_backsub now gets output dims right including inplace - thanks @wlmb for report

2.048 2021-05-24
- remove obsolete and inaccurate doc relating bad values to NaN
- parse simple complex-number strings
- SvPDLV gives more comprehensible error if given a hash without "PDL" key
- drop SKIP_KNOWN_PROBLEMS support
- drop POGL_VERSION, USE_POGL, WITH_3D config; just try building
- Inline now not a dep but if installed gets updated to suitable version
- drop WITH_SLATEC config; just try building
- new pdlperl.h for Perl-specific functions/macros
- $PDL::undefval can be ndarray
- replace PDL::Complex stringification with native-complex version
- overloading now done in PDL::Ops/Primitive where functions defined
- overloading honours subclass methods

2.047 2021-05-08
- add PDL::i2C
- replace creal, cimag with re, im, for easier PDL::Complex -> native transition
- change default r2C and i2C input types to D from F
- add czip($re, $im) -> native complex
- i() as function (not constant) like nan()
- ci() removed
- add abs2
- re, im not exported due to clash with Test::Deep

2.046 2021-05-04
- pdl([native-complex]) now creates a native-complex ndarray
- sumover/prodover now also process native complex

2.045 2021-05-03
- PDL::r2C able to take simple numbers
- comparing PDL::Complex other than for equality now a fatal error, can == with real
- same comparison change in native complex
- PDL::Complex slices that affect 0-th dim get re-blessed as PDL
- PDL::Complex can assign real values and threading won't also assign to imag
- PDL::Constants only loads PDL::Complex on demand

2.044 2021-05-01
- fix a definite malloc error that may be what started build failures on 32-bit

2.043 2021-04-30
- fix case-sensitivity issue for earlier Perls in stringifying "NaN" - thanks @zmughal

2.042 2021-04-30
- ones, zeroes can be called with no args, returns zero-dims ndarray
- add nan() and inf() that behave similarly to ones, mutatum mutandis

2.041 2021-04-30
- at least GCC 4.8.5 needs loop var declared first
- can now use Inline "with" PDL in languages other than C
- ipow second param is "indx" so specify
- ipow only operate on floating-point types

2.040_02 2021-04-29
- build fixes plus make LINALG work on 32-bit
- update metadata to correct List::Util version dep

2.040_01 2021-04-28
- all C dimension- and threadid-related things now typed PDL_Indx
- PDL_CORE_VERSION 15

2.040 2021-04-27
- PDL_CORE_VERSION 14 for Core struct updates
- drop unused dep Module::Compile
- switch from List::MoreUtils to List::Util to reduce deps
- bad value per-PDL support now always present, not configurable
- use C99 isnan() to check for NaN, not isfinite(); complex if either are NaN
- the above (this note added post facto) changes setnantobad's behaviour to match function name
- can use NaN as badvalue for all floating-point types
- BADVAL_USENAN configuration option removed
- remove checks for _MSC_VER < 1400 as native complex req renders irrelevant
- add $type->floatsuffix for more generalisation
- all pdl.h type code generated from type objects to ease adding new types
- all suitable PDL::Primitive functions support native complex
- add PDL::GSL::LINALG - linear algebra routines from GSL

2.039 2021-04-24
- update lu_backsub docs with comparison to other linear algebra code
- fix "complex" type-qualifier bug affecting native-complex r2C
- add core pdl_at0
- Core.xs:set_c, badvalue now able to take a PDL object not just Perl scalar
- can construct a PDL object with Math::Complex objects
- fix cfloat-comparison that was breaking badval detection in complex types
- add $type->isnan('c expression')
- badvalue doesn't force return values to be Perl scalar but PDL object
- native complex values get Perl-ised into PDL::Complex::Overloads objects not strings

2.038 2021-04-19
- make pdlpp_postamble 4th arg be XS subs destination
- Inline::Pdlpp can take package param to put XS subs into
- incorporated GSL CDF functions out of PDL::Stats - thanks @maggiexyz!

2.037 2021-04-16
- switch obsolete finite() to C99 isfinite()
- add ppdefs_all
- make PDL::Types::ppdefs only return non-complex types for back-compat

2.036 2021-04-16
- fix t/gis_proj.t

2.035 2021-04-15
- bad value support now always present, not configurable
- pthread detection simplified, now enabled for Windows and MacOS
- remove check in build for ~/.perldl.conf
- remove TEMPDIR config - all now use File::Temp
- remove unnecessary PDL::Version (just "require PDL")
- relocate tests to beside what's tested (helps with any split)
- incorporate patches from downstream OpenSUSE - thanks @perlpunk
- add ppdefs_complex

2.034 2021-03-31
- add "complex" Pars type qualifier, r2C function

2.033 2021-03-30
- native complex documented better - thanks @fantasma13
- add "real" Pars type qualifier

2.032 2021-03-24
- fix t/pptest.t so it passes on 5.10, add VERSION_FROM to pdlpp_stdargs

2.031 2021-03-23
- pp_setversion preserves version as string, handling quote characters

2.030 2021-03-21
- PDL::Types now have the data to make PDL::Type::real etc operate
- pp_setversion treats (and preserves) version as string

2.029 2021-03-12
- no changes from 2.028_01

2.028_01 2021-03-08
- stop claiming packages C::StructObj C::StructType C::Type C::Var SymTab Win32::DDE::Netscape XS
- incorporate relevant improvements made in PDLA distros
- fix t/nat_complex.t to avoid glibc bug 18594 (fixed v2.22)

2.028 2021-03-07
- correct complex-maths functions for their C types
- fix MOD-problem-dodging logic for native complex

2.027 2021-03-06
- no changes from 2.026_04

2.026_04 2021-03-02
- define and use C macros in PP for shorter, more comprehensible XS

2.026_03 2021-02-28
- got_complex_version change to defeat FreeBSD 10 false positive for complex funcs
- trig functions like asin($perl_scalar) return NaN for >1 again

2.026_02 2021-02-25
- implement PDL::Type::real etc
- native complex numbers need check_lib as FreeBSD <10 has no complex trig

2.026_01 2021-02-19
- native support for complex numbers - thanks @fantasma13

2.026 2021-02-13
- fix GSL build errors, improve docs - thanks @d-lamb
- rfits properly treats BLANK in rice-compressed - thanks @d-lamb
- added Floyd-Warshall example to MATLAB comparison doc

2.025 2020-11-19
- fix spellings - thanks @sebastic

2.024 2020-09-17
- use CCCDLFLAGS for compile of pdl.c to include -fPIC where needed - thanks @newville

2.023 2020-09-14
- Remove extrapolation code from PDL::GSL::INTERP. - thanks @d-lamb

2.022 2020-09-06
- Fix wfits so that explicitly setting BITPIX works. - thanks @d-lamb
- add PDL::IO::Pic::imageformat - thanks @wlmb

2.021 2020-03-01
- fix pdlpp_postamble - thanks @sebastic

2.020_05 2019-12-29
- fix t/pgplot.t

2.020_04 2019-12-28
- more diagnostic info for PGPLOT / F77

2.020_03 2019-12-26
- PGPLOT test to check $DISPLAY first
- CallExt test to use abs path because of recent MacOS change

2.020_02 2019-12-17
- spelling fixes - thanks @sebastic

2.020_01 2019-12-12
- merge the documentation system updates - thanks @d-lamb

2.020 2019-12-12
- no changes from 2.019_06

2.019_06 2019-12-08
- PGPLOT stop accidentally finding own PGPLOT.pm from . in @INC - was loading installed %PDL::Config into Makefile.PL process

2.019_05 2019-12-02
- calloc->malloc+memset, as calloc on Win32 = "free to wrong pool"
- memset after malloc in pdlapi.c

2.019_04 2019-11-27
- fix PdlParObj.pm excessive pp_line_numbers

2.019_03 2019-11-25

- t/config.t stop specifying number of %Config keys
- update Inline dep for ILSM-finding bug
- use pp_line_numbers in PP.pm and ops.pd
- use calloc not malloc to reduce valgrind errors in ufunc.t

2.019_02 2019-11-19

- fix t/fits.t tempfiles use
- _oneliner to use EU::MM right

2.019_01 2019-11-10

- Honor LDFLAGS when building pdl - thanks @wiz-0
- build works even without Devel::CheckLib
- race condition in tests fixed to allow parallel tests
- fix spelling errors - thanks @sebastic
- Fix tilde expansion tests when non-existent $HOME - thanks @sebastic
- zap inc/Carp - fix #94
- update doc URLs, and docs - thanks @d-lamb
- replace all non-sort, non-ppdef-doc $a/$b in codebase - thanks @d-lamb
- Clean up PDL::Fit::Gaussian docs and tests - thanks @d-lamb
- badval fixes on systems with only unsigned chars - thanks @d-lamb
- fix segfault in some uses of PDL::Transform::map - thanks @d-lamb
- Improve compatibility with Perl's experimental 'bitwise' feature - thanks sprout@cpan.org
- RedoDims fix - thanks @drzowie
- range speedup - thanks @drzowie
- PDL::Lite fixes to bug that broke Test::PDL
- propagation of badflag with .= - thanks @hainest
- doc-building fixes for Windows
- quote-protect rpic/wpic commands
- test-coverage now available for XS files too
- Only build PDL::Graphics::PGPLOT if PGPLOT installed
- better vsearch_* docs - thanks @zmughal
- PDL::Complex doc and code fixes, tests, and improvements - thanks @d-lamb

v2.019 2018-05-05 16:42:44-04:00

General Notes:

 * This is version 2.019 of the Perl Data Language.

 * It is a the first official release of PDL initiating
   the development and release moving from sourceforge
   to github hosting.

 Highlights:

 * cat returns an ndarray of the highest input type, not
   the first.

 * The 'thresh' options in fitwarp2d has been removed.

 * rfits/wfits now do tilde filename expansion.

 * det in MatrixOps now uses the cached lu_decomp
   value correctly.

 * Multiple minor fixes, docs, cleanup, and changing
   things to point to github away from sf.net.

v2.018_02 2018-04-28 13:46:27-04:00

General Notes:

 * This is version 2.018_02 of the Perl Data Language.

 * It is a the release candidate for the PDL-2.019
   release which marks the move of PDL development
   from sf.net to github.

 Highlights:

 * Various updates to redirect links and documentation refs
   to the github ones.

 * Various fixes over the past year since PDL-2.018 release
   which will be documented at the next official PDL release.



v2.018_01 2018-04-13 09:56:56-04:00

General Notes:

 * This is version 2.018_01 of the Perl Data Language.

 * It is a transition developers release for the move of
   PDL development from sf.net to github.

 Highlights:

 * Various updates to redirect links and documentation refs
   to the github ones.

 * Various fixes over the past year since PDL-2.018 release
   which will be documented at the next official PDL release.



v2.018 2017-05-21 17:02:03-04:00

General Notes:

 * This is version 2.018 of the Perl Data Language.

 Highlights:

 * SF.net Bugs fixed:
 
     429   Alien::Proj4->load_projection_information parses PJ_sch parameters incorrectly
     432   Work around List::MoreUtils bug t/gd_oo_test.t started failing in testers.
     433   GSL SF errors kill perl and pdl2/perldl shell
     434   Missing indx type in heading list of conversions.
 
 * Build improvements:
     
     - Add requirements and better test diags for PDL::IO::GD.
 
     - Apppy patch so PDL::Lite can be used more than once
       Thanks to Shawn Laffan for the patch.
 
     - Fix build on perl <= 5.14 by adding ExtUtils::ParseXS to
       CONFIGURE_REQUIRES.
     
     - Make coretarget generate parallelisable make deps Make
       "core" target be generated by separate function
 
     - Fixes for coming removal of . from @INC for PDL build.
       Thanks to Todd Rinaldo for the first patch and raising the issue.
 
 * Various updates to the documentation.



v2.017_02 2017-05-18 17:33:55-04:00

General Notes:

 * This is version 2.017_02 of the Perl Data Language,
   and essentially PDL 2.018 release candidate 1.  If
   it tests ok we expect to release it as PDL 2.018 this
   weekend.

 Highlights:

 * Fix problem where PDL::Lite could not be loaded more
   than once. (Thanks to Shawn Laffan)

 * Fix sf.net bug #429 with poor generation of documentation.

 * Fix sf.net bug #433 where errors in GSL routines caused
   perl to exit.

 * Build enhancements for PDL::IO::GD to improve test
   diagnostic messages and add List::MoreUtils as a
   dependency for PDL.
 
 * Better docs and explanation of indx datatype.
   This closes sf.net bug #434.

 * Add some missing modules to DEPENDENCIES (thanks
   to Luis Mochan).



v2.017_01 2017-04-29 11:39:22-04:00

General Notes:

 * This is version 2.017_01 of the Perl Data Language,

 * Addresses some problems from changes in the perl
   infrastructure that are or will break things in PDL.

 Highlights:

 * Handle coming removal of '.' from @INC

 * Fix sf bug #432:  Work around List::MoreUtils bug
   This was causing a lot of PDL test failures.

 * Fix build problem on perl <= 5.14



v2.017 2016-10-08 13:50:39-04:00

General Notes:

 * This is version 2.017 of the Perl Data Language,

 * Bugs fixed:

    379   Passing qsort an extra argument causes a segfault
    393	  Tests may fail if perl is compiled with -Duselongdouble
    409	  PDL demos with PGPLOT display ignore $ENV{PGPLOT_DEV}
    413   PDL::Core::Dev::pdlpp_postamble() cannot handle .pd files in subdirectories
    419   t/#pdl_from_string.t fails on long double systems
    421	  PDL::IO::FITS can't handle 64-bit integers (longlong, indx)
    422	  PDL misc. compiler warnings.
    423	  wcols FORMAT option always incorrectly gives error
    424	  Calling PDL on a list of ndarrays fails to propogate bad values
    425	  svd is broken for everything but 2x2 matrices
    ---	  Typo in PDL::GSLSF::COUPLING routine gsl_sf_coupling_6j


 Highlights:

 * Several patches contributed from the Debian team have been applied
   that fix documentation spelling errors, make PDL builds more
   reproducible, and will make packaging PDL easier.

 * More helpful error message when multi-element PDL is used in
   a boolean expression (feature request #84)

 * Improve argument size handling and documentation for rle
   (feature request #80)

 * One can now use $pdlc = pdl($pdla,$pdlb) when $pdla and/or $pdlb
   have BAD values and the BAD values will propagate to
   $pdlc. Previously this would only work with a copy of a single
   ndarray (e.g., $pdlc = pdl($pdla) ) or with 'cat'.

 * Many changes have been made to make PDL compile more cleanly and
   emit fewer compiler warnings.

 * Quiet printf format warning for sizeof()

 * Deprecate finite in favor of isfinite.

 * Many cleanups and additions to the test suite to use Test::More
   and to add meaningful test descriptions.

 * Added subtests to primitive.t
 
 * Add PDL::Doc::add_module to pdlpp_postamble



v2.016_91 2016-10-03 14:03:19-04:00

General Notes:

 * This is version 2.016_13 of the Perl Data Language,
   a.k.a. PDL-2.017 release candidate 1.

 * All but release notes and announcement done...

 Highlights:

 * Added subtests to primitive.t

 * Quiet printf format warning for sizeof()



v2.016_03 2016-10-01 17:51:40-04:00

General Notes:

 * This is version 2.016_03 of the Perl Data Language.

 Highlights:

 * Bugs fixed:
    413   PDL::Core::Dev::pdlpp_postamble() cannot handle .pd files in subdirectories
    419   t/#pdl_from_string.t fails on long double systems

  * More helpful error message when multi-element PDL is used in
    a boolean expression (feature request #84)

  * Improve argument size handling and documentation for rle
    (feature request #80)



v2.016_02 2016-09-21 13:42:15-04:00

General Notes:

 * This is version 2.016_02 of the Perl Data Language.

 * Bugs fixed:
    379   Passing qsort an extra argument causes a segfault
    393	  Tests may fail if perl is compiled with -Duselongdouble
    409	  PDL demos with PGPLOT display ignore $ENV{PGPLOT_DEV}
    421	  PDL::IO::FITS can't handle 64-bit integers (longlong, indx)
    422	  PDL misc. compiler warnings.
    423	  wcols FORMAT option always incorrectly gives error
    424	  Calling PDL on a list of ndarrays fails to propogate bad values
    425	  svd is broken for everything but 2x2 matrices
    ---	  Typo in PDL::GSLSF::COUPLING routine gsl_sf_coupling_6j

 Highlights:

  * One can now use $pdlc = pdl($pdla,$pdlb) when $pdla and/or $pdlb
    have BAD values and the BAD values will propagate to
    $pdlc. Previously this would only work with a copy of a single
    ndarray (e.g., $pdlc = pdl($pdla) ) or with 'cat'.

  * Many changes have been made to make PDL compile more cleanly and
    emit fewer compiler warnings.

  * Many cleanups and additions to the test suite to use Test::More
    and to add meaningful test descriptions.

  * Several patches contributed from the Debian team have been applied
    that fix documentation spelling errors, make PDL builds more
    reproducible, and will make packaging PDL easier.



v2.016_01 2016-06-01 13:01:55-04:00

General Notes:

 * This is version 2.016_01 of the Perl Data Language.
 

 Highlights:

  * Add PDL::Doc::add_module to pdlpp_postamble

  * Deprecate finite in favor of isfinite.



v2.016 2016-05-30 10:22:04-04:00

General Notes:

 * This is version 2.016 of the Perl Data Language.
 
 * Bugs fixed:
    417   Perl 5.22: + GSL 2.1 fails to build
    408   PDL::GSL::RNG set_seed minor improvement
    407   Build failures with GSL 2.1
    416   PDL::PP creates .pm & .xs files before pp_done is called
    414   ccNcompt (i.e. cc4compt and cc8compt) breaks with byte data type


 Highlights:

  * All collapse operators now have "<name>over" equivalent names.
    This ends an API wart in which most, but not all, of the collapse
    operators had a short form that did full collapse and a long form
    that did 1-D collapse only (e.g. "and" collapses to a point,
    while "andover" collapses by one dimension).  The exceptions are
    left in for legacy code, but now have regularized "-over" forms
    as well:

       average       -> avgover
       daverage      -> davgover
       maximum       -> maxover
       maximum_ind   -> maxover_ind
       maximum_n_ind -> maxover_n_ind
       minmaximum    -> minmaxover
       minimum       -> minover
       minimum_ind   -> minover_ind
       minimum_n_ind -> minover_n_ind

  * PDL::Transform image resampling now handles bad values in
    images.  In particular, the `h' and `j' (optimized filter)
    resampling methods properly skip bad values in the image,
    marking output pixels bad if more than 1/3 of the weighted
    values associated with that output pixel are bad.

  * PDLs with dataflow can now be reshaped.  The dataflow
    connection gets severed by the reshape operation.
    
  * PDL::IO::FITS now works better with RICE-compressed FITS
    images, such as are produced by NASA's SDO project.

        - The NAXIS* header keywords are now replaced by their
	  ZNAXIS* equivalents, so the NAXIS fields in the header
	  are correct after the image is read in.

        - The Z*, TFIELDS, TTYPE*, and TFORM* keywords are now
          deleted from the header object, so that the uncompressed,
          loaded image does not have leftover compression headers.
    
  * The language preprocessor PDL::PP now does not automatically
    call pp_done for modules that do not call pp_done themselves.
    This new, stricter behavior requires module authors to call
    pp_done at the end of their PDL::PP file.  This prevents
    partially-complete .xs and .pm files from being written if
    there is a module build error.
    
  * PDL::GSLSF modules have several fixes/improvements to support
    building against GSL 2.0:

        - New calling convention for gsl_sf_ellint_D.
        - New functions gsl_sf_legendre_array
	    and gsl_sf_legendre_array_index.
        - Deprecated gsl_sf_legendre_Plm_array
	    and gsl_sf_legendre_sphPlm_array.
        - New tests for new legendre functions.
        - Test requires all PDL::GSLSF modules
	    to successfully load.

  * PDL::GSL::RNG now allows chaining for the set_seed() method:
    e.g. $rng = PDL::GSL::RNG->new(..)->set_seed(..)
    
  * PDL::Image2D's ccNcompt connected-component analysis code now
    returns types that are >= long, to avoid common overflow errors.

  * PDL::whichND returns PDLs of Indx type, to avoid overflows.

  * Empty ndarrays are handled slightly differently now by
    PDL::info and `help vars'.  Empty ndarrays are different
    from null ndarrays, and now generate different info strings.
    (null ndarrays lack data or dimensions; empty ndarrays have
    at least one dimension of size 0).
    
  * PDL::Fit::LM:

        - Documentation has been clarified relating to input
	    data uncertainties and weighting of the fit.
        - A small test suite has been added.

  * There is now a .gitattributes file so GitHub repo language
    stats are more accurate.

  * The PDL SF/GitHub deveolpment workflow is integrated into
    the DEVELOPMENT docs.
v2.015_001 2016-05-27 12:28:39-04:00

General Notes:

 * A.k.a PDL-2.016 release candidate 1.


Highlights:

 * TBD



v2.015 2015-11-22 08:52:22-05:00

General Notes:

 * PDL-2.015 is a clean and polish release.  It fixes
   some problems discovered with PDL-2.014 and improves
   the 64bit integer support.
 

Highlights:

 * Fixes to improve compile and test of F77 modules
   on OS X (i.e. don't build i386 versions)

 * Basic/Ops/ops.pd - make compatible with MSVC++ 6.0

 * Fix win10 breakage in t/flexraw_fortran.t  Apparently, temp
   files were not being released after use which was preventing
   the tests to pass. 

 * Fix missing PDL license information

 * Fix sf.net bug #403: reshape() failed when applied to a
   ndarray with dataflow.  Now, changing the shape of a PDL
   that already has dataflow is prevented and an error message
   given.

 * Fix sf.net bug 406 Added missing logic for clump(-N) and minor
   cleanup of perl wrapper.

 * force new_pdl_from_string to return an ndarray with P=physical flag

 * Add $PDL::indxformat for PDL_Indx This avoids loss of
   significance when 64bit PDL_Indx values are printed.

   Make new_pdl_from_string() avoid converting IV values
   to NVs This allows pdl(indx, '[ 9007199254740992 ]')
   to work without rounding due to the 52bit double
   precision mantissa versus the 63bits + sign for PDL_Indx.

 * Add type support info to pdl() constructor documentation.
   pdl() has always supported this usage but examples were
   missing in the documentation.

 * improving PDL::GSL::RNG documentation

 * remove spurious '}' from gnuplot demo



v2.014_03 2015-11-19 12:37:00-05:00

General Notes:

 * This quick release is to verify the fix for the
   PDL license information.
 

Highlights:

 * Some updates to Changes and Known_problems
   as well.



v2.014_02 2015-11-17 09:20:23-05:00

General Notes:

 * This is the 2nd release candidate for PDL-2.015
 

Highlights:

 * Same as PDL-2.014_01 but with a couple of F77 build
   fixes from Karl to support MacOSX builds and, we hope,
   a SciPDL to go with PDL-2.015!



v2.014_01 2015-11-14 14:01:28-05:00

General Notes:

 * This is PDL-2.014_01, a cleanup and bug fix release.
 

Highlights:

 * Add $PDL::indxformat for PDL_Indx and
   Make new_pdl_from_string() avoid converting IV values to NVs

   PDL_Indx values (type indx) now print with an integer
   format specification so all digits get printed.  In
   addition pdl(indx, '[ 9007199254740992 ]') works as well
   going the other direction.

 * Fix sf.net bug 403: reshape can't handle ndarrays with -C flag

   reshape() on an ndarray with dataflow isn't meaningful.
   Now a warning is given.  You can $pdl->sever first
   and then reshape() can be applied.
   
 * Fix sf.net bug 406: clump() produces bogus dims

 * Various build improvments and documentation fixes:

   - force new_pdl_from_string to return an ndarray with P=physical flag
   - remove spurious '}' from gnuplot demo
   - Basic/Ops/ops.pd - make compatible with MSVC++ 6.0
   - Fix win10 breakage in t/flexraw_fortran.t
   - improving PDL::GSL::RNG documentation
   - Add type convert info to POD for the pdl() constructor



v2.014 2015-10-12 11:44:10-04:00

General Notes:

 * This is PDL-2.014 introducing full support for
   64bit indexing operations using 64bit PDL_Indx
   data type.

 * PDL can now create and use ndarrays having more
   than 2**32 elements.  Of particular use is that
   you can now use PDL::IO::FlexRaw to memory map
   ndarrays from files on disk which can allow for
   simplified processing and IO on extremely large
   data.

 * Due to the new PDL_Anyval type changes, existing
   PDL::PP modules may need to be updated to support
   the new PDL Core version 12 API.  Authors, please
   see PDL::API for macros to ease the porting.

   Users, be aware that some modules may not work
   until they are updated by their maintainers.
 

Highlights:

 * Implement PDL_Anyval data type as union to support
   64bit indexing
    
   This adds a union data type to add 64bit integer support to
   the original PDL-2.x types which assumed that double was
   capable of holding all the "lesser" types.  With the PDL_Anyval
   type, we can correctly handle 64bit integer data types and
   avoid errors and loss of precision due to conversions to or
   from PDL_Double.  Special thanks to kmx and zowie for their
   help to complete and debug this implementation.

 * Many fixes to the build process to make PDL more robust
   to build, test, and install.  This takes advantage of new
   automated CI testing via Travis CI on the github site.

   Thanks much to Ed and Zakariyya for their work to get
   this started and maintained.  This CI testing makes
   this the best tested and best testing PDL release ever!

 * Various documentation clean-ups and work to improve
   on-line viewing at http://metacpan.org and others.
   (Thanks kmx and Derek!)

 * A new ipow() method haw been added with 64bit integer
   support.  ipow() calculates the integer exponentiation
   of a value by successive multiplications.  This allows
   one to avoid loss of significance in integer exponents.
   pow() converts the value to double and will always have
   <52bits precision.

 * nbadover and ngoodover now return indx type (PDL_Indx)

 * PDL now detects when your perl installation has been
   built with floating point longer than 8 bytes and gives
   a one time warning that precision will be lost converting
   from perl NV to PDL_Doubles.  This warning is given on
   "use PDL;"

 * "use PDL" now includes "use PDL::IO::Storable"
   This avoids a hard to diagnose crash that can
   occur when a user tries using Storable without the
   necessary "use PDL::IO::Storable".

 * MANY sf.net bugs fixed:
 
   400  dataflow slice crash around 2**31 boundary
   399  Small doc fixes
   398  $pdl->hdr items are lost after $pdl->reshape
   396  online docs for modules only work first time in PDL shells
   395  ipow (integer exponentiation) support for 64bit index support
   394  demo cartography fails
   383  gcc/#gfortran 4.9.2 needs -lquadmath
   378  where on dice of pdl bad results
   376  PDL Segmentation fault working with Storable restored PDL
   347  t/#pdl_from_string.t has a failure if BADVAL_NAN=1
   346  ExtUtils::F77 dependency causing problems for CPAN install
   343  longlong constructor and display lose digits due to...
   340  orover of byte data returns long type



v2.013_06 2015-10-10 16:04:14-04:00

General Notes:

 * This is PDL-2.013_06 which is RC 2 for PDL-2.014
   and likely the final one before the official
   release.  Please report any final issues and doc
   patches ASAP.
 

Highlights:

 * Mark some failing tests in t/primitive.t as TODO
   to avoid CPAN Testers failures.

 * Add IPC::Cmd to TEST_REQUIRES



v2.013_05 2015-10-08 07:14:19-04:00

General Notes:

 * This is PDL-2.013_05 (a.k.a. PDL-2.014 rc 1) which
   is the fifth CPAN developers release for PDL with
   newly completed support for 64bit indexing.
 
 * Needs testing for ndarrays with more than 2**32
   elements but all checks pass so far.


Highlights:

 * Fix problem with broken t/opengl.t for testers



v2.013_04 TBD

General Notes:

 * This is PDL-2.013_04 which is the fourth CPAN
   developers release for PDL with newly completed
   support for 64bit indexing.
 
 * Needs testing for ndarrays with more than 2**32
   elements but all checks pass so far.


Highlights:

 * t/opengl.t is skipped the dynamic GL window creation
   tests if $AUTOMATED_TESTING is true.
 
 * A new ipow() routine for integer exponentiation

 * Corrected return types of intover, borover, bandover,
   nbadover, and ngoodover.

 * Fixed compile problem in clang from using finite()
   on an integer datatype.



v2.013_03 2015-10-04 12:21:30-04:00

General Notes:

 * This is PDL-2.013_03 which is the third CPAN
   developers release for PDL with newly completed
   support for 64bit indexing.
 
 * Needs testing for ndarrays with more than 2**32
   elements but all checks pass so far.


Highlights:

 * More clean-up to handle perls with long double NVs
   Loss of precision will be warned on "use PDL;"

 * Skipping t/bigmem.t to avoid OOM CPAN Testers fails.

 * Minor fixes to C code to meet stricter compiler
   and C99 requirements.



v2.013_02 2015-10-03 08:40:08-04:00

General Notes:

 * This is PDL-2.013_02 which is the second CPAN
   developers release for PDL with newly completed
   support for 64bit indexing.
 
 * Needs testing for ndarrays with more than 2**32
   elements but all checks pass so far.


Highlights:

 * Clean up to handle perls with long double NVs

 * Various bugs closed

 * PDL::IO::Storable is now loaded with "use PDL;"



v2.013_01 2015-09-26 17:39:41-04:00

General Notes:

 * This is PDL-2.013_01 which is the first CPAN
   developers release for PDL with newly completed
   support for 64bit indexing.
 
 * Needs testing for ndarrays with more than 2**32
   elements but all checks pass so far.


Highlights:

 * TBD



v2.013 2015-08-14 08:37:15-04:00

General Notes:

 * This is PDL-2.013.  It is PDL-2.012 with some fixes
   for badvalue problems and Solaris make issues.
 
 * See PDL 2.012 notes below.


Highlights:

 * Fix for sf.net bug #390: scalar PDL with badvalue
   always compares BAD with perl scalars.  Now a warning
   is given if the badvalue could conflict with the
   results of a logical or comparision operation.
 
 * Fixed a makefile construct which was ambiguous and
   caused build failures on Solaris using their make.
   Gnu make was not affected even on Solaris.



v2.012_01 2015-08-01 15:47401-0400

General Notes:

 * This is PDL-2.012_01.  It is PDL-2.012 with some fixes
   for badvalue problems when the badvalue was 0 or 1.
 
 * See PDL 2.012 notes below.


Highlights:

 * Candidate fix for sf.net bug #390: scalar PDL with
   badvalue always compares BAD with perl scalars



v2.012 2015-06-14 08:27:01-0400

General Notes:

 * This is PDL-2.012 it is essentially PDL-2.011 with some
   fixes for some minor issues that only came to light
   with a new official release.
 
 * See PDL 2.011 notes below.


Highlights:

 * Add package statements so PDL::Lite and PDL::LiteF are
   indexed correctly
 
 * Give PDL::NiceSlice a non-developer release for indexing

 * Fix build regression that broke ActiveState perl
   builds for many perl versions and OS platforms.



v2.011 2015-06-02 17:01:22-0400

General Notes:

 * This is PDL-2.011 it is essentially PDL-2.008 with some
   fixes for some minor issues.
 
 * perl 5.10.x is now the minimum version of perl
   supported by PDL-2.008 and later.

 * PDL::FFTW is no longer part of the PDL Core.
   Please use PDL::FFTW3 from CPAN (Dima Kogan)
   with Alien::FFTW3 support (Craig DeForest)

 * PDL::Graphics::PLplot is no longer included in
   the PDL core distribution.  Please install from
   CPAN directly.

 * 50 sf.net bug tickets closed/fixed since PDL-2.007!

 * Partial 64bit indexing support with some fixes
   to remaining issues.  Full 64bit support for perl
   modulus operater ('%') is in progress.
 
 * Major clean up and rework of the core PDL
   computation code, the build process, test suites,
   and updating to reflect more of the best practices
   for perl module development.
 
 * The PDL development has moved to github and now
   has added continuous commit testing via the
   Travis-CI framework.  The git workflow is now
   inline with current practices and it is expected
   that this will allow more contributions and "eyes
   on the code".


Highlights:

 * See PDL 2.008 Highlights below.



v2.010 2015-06-02 14:40:15-0400

General Notes:

 * Another indexing regression.  Sigh.



v2.009_01 2015-05-29 17:47:57-0400

General Notes:

Highlights:

 * Removal of PDL::Graphics::PLplot since exists as separate CPAN distro



v2.009 2015-05-29 12:26:25-0400

General Notes:

 * This is PDL-2.009. It has tweaks to fix PAUSE/CPAN
   indexing problems in 2.008.
 
 * Known_problems updated to reflect a seldom seen
   pdldoc installation problem for certain custom
   perl configurations on cygwin.  A workaround is
   known.  Please contact the PDL mailing list if you
   have this problem.  See the sf.net bug report at
   http://sourceforge.net/p/pdl/bugs/384/ for more
   information.
 
 * See Release Notes for PDL 2.008 below for more.



v2.008 2015-05-24 18:42:22-0400

General Notes:

 * This is PDL-2.008!  Yay!

 * perl 5.10.x is now the minimum version of perl
   supported by PDL-2.008 and later.

 * 50 sf.net bug tickets closed/fixed since PDL-2.007!

 * Partial 64bit indexing support with some fixes to
   remaining issues.  Full 64bit support for perl modulus
   operater ('%') is in progress.
 
 * Major clean up and rework of the core PDL computation
   code, the build process, test suites, and updating to
   reflect more of the best practices for perl module
   development.
 
 * The PDL development has moved to github and now has
   added continuous commit testing via the Travis-CI
   framework.  The git workflow is now inline with
   current practices and it is expected that this will
   allow more contributions and "eyes on the code".

Highlights:

 * PDL::FFTW is no longer part of the PDL Core.
   Please use PDL::FFTW3 from CPAN (Dima Kogan)
   with Alien::FFTW3 support (Craig DeForest)

 * New improved vsearch functionality, interfaces,
   and documentation (Diab Jerius)
 
 * PDL::IO::Storable now robust against version, platform
   endianness, and supports the new 64bit PDL_Indx data
   type (Dima Kogan)

 * Clean up of PDL/Basic/Core code to remove cruft and
   to simplify the evolution to a coming improvements
   (Craig DeForest)
 
 * Major clean up, de-crufting, and streamlining of the
   entire PDL ExtUtils::MakeMaker build process (Ed J)
 
 * Standardizing and updating the entire PDL test suite
   to a common basis (use Test::More) and coding to more
   consistent best practices.  E.g., use strict
   This is a huge (ongoing) effort but a comprehensive
   test suite is needed for regression tests to validate
   compatibility of coming PDL3 architecture changes.
   (Zakariyya Mughal)

 * You can now call the PDL::Graphics2D twiddle()
   routine with an argument of 0 or 1 (i.e., false
   or true) to set whether the twiddle loop is run.

 * Library dependency detection improvements including
   PROJ4 and GD.  A number of improvements in this for
   strawberry perl on windows (kmx)
 
 * The PDL distribution process now generated the
   documentation for the modules using the automated
   code generation process.  This makes all the PDL
   docs available on http://search.cpan.org and on
   http://metacpan.org for your web browser. (kmx)

 * Improved support to build XS/C extensions: (Ed J)
   - You can now: "use Inline with => 'PDL';", see PDL::API
   - You can, in your module's Makefile.PL:
     "$p = new ExtUtils::Depends 'MyMod', 'PDL'"

 * MANY sf.net tickets closed:

   377   PDL::Transform::Proj4 not building under latest dev EUMM
   375   Storable files incorrectly processed from older versions.
   374   CONFIGURE_REQUIRES => Devel::CheckLib
   373   2.007_11 MANIFEST
   372   2.007_11 fails on MS Windows 64bit
   371   PDL-2.4.11 medover failure in perl 5.20.1
   370   PDL-2.007 can fail to build Basic/#Core files
   369   slice fails with subclass index
   368   PDL::Slatec::polyfit ignores incorrect length of weight ndarray...
   367   BAD value parsing breakage
   365   CPAN PDL install broken due to breakage in Module::Compile 0.34
   363   PP "OtherPars" namespace is not clean
   362   rcols COLIDS need chomp-ing
   361   vsearch bug w/# reversed list
   360   subtle & rare bug in vsearch
   359   Improved documentation for vsearch
   358   one2nd() has unexpected behaviour when given a Perl scalar rather than an ndarray
   357   Android support
   356   overload::Method() does not return coderef for stringification
   355   dog creates 0 dim ndarray which squeezes to 1 dim.
   353   imag2d not 'use warnings' safe and no way to disable twiddle
   352   reorder() not an lvalue sub
   351   PDL_BOOT has wrong XS code
   350   Modules using PDL::Slatec will get installed even if Slatec is disabled
   349   PDL needs integrated support for PDL::PP and CPAN indexer
   348   PDL->null->slice('')->nelem results in error
   345   documentation of WITH_PLPLOT in perldl.conf incorrect
   344   Current version numbering is broken
   342   BUGS file not indexable or discoverable
   337   rangeb() broken for 64bit index support on 32bit perl
   332   "isn't numeric in null operation" warning could be more helpful
   331   uniq does not always return proper object
   329   t/#picrgb.t fails in PDL build
   321   Several core modules do not have man pages
   319   PDL::Index does not render on websites
   316   plplot.t failure when building 2.4.11
   314   conv1d bad value broken
   313   clip() edge case not handled right
   312   Wrong results in corner empty-set cases
   283   PDL::IO::FITS::wfits corrupting FITS image
   272   indexND of Empty pdls can segfault
   268   PLplot still unusable with X
   261   max() fails on nan
   256   Threadable version of PDL::MatrixOps::inv
   232   perl -d chokes on lvalue functions
   227   PGPLOT module doesn't work in PDL
   224   Ctrl-C kills perldl in win32 console
   207   Name "PDL::SHARE" used only once.
    63   Unable to get the 3d demos
    51   justify option fails in imag (PDL2.3.4)



v2.007_17 2015-05-06 13:35:57-0400

General Notes:

 * This is PDL-2.008_rc4!

Highlights:

 * Clean up of large number modulo tests and make TODO for
   the PDL-2.008 release.
 
 * Fix build/configure problems from CPAN Testers reports.

 * Quiet excessive warnings in perldl and pdl2doc



v2.007_16 2015-04-22 10:23:46-0400

General Notes:

 * This is PDL-2.008_rc3!

Highlights:

 * Various clean up and doc fixes

 * Add more of the PDL prerequisites explicitly to handle
   missing core functionality for CPAN Testers.



v2.007_15 2015-04-19 17:08:55-0400

General Notes:

 * This is PDL-2.008_rc2!

Highlights:

 * Build issues with PROJ4 detection and link with cygwin
   platforms has been worked around.
 
 * Failing tests in t/ops.t for new 64bit modulus support
   have been marked TODO.



v2.007_14 2015-04-11 14:28:07-0400

General Notes:

 * This is PDL-2.008_rc1!

Highlights:

 * More cleanup and a couple of build issues fixed with
   PROJ4.

 * Various test suite improvements.



v2.007_13 2015-03-22 16:00:03-0400

General Notes:

 * Counting down to a PDL-2.008 release this April 2015

Highlights:

 * Travis on Github now routinely tests on dev ExtUtils::MakeMaker, clang:
   https://travis-ci.org/PDLPorters/pdl

 * Coveralls on Github now lists test coverage:
   https://coveralls.io/r/PDLPorters/pdl

 * Many tests updated to use Test::More, Test::Deep, Test::Exception

 * PDL::FFTW is now removed from the PDL core.  Use
   PDL::FFTW3 instead.

 * Prototype use of Alien::Proj4 to encapsulate install/build info

 * Fix warnings compiling under clang

 * Addition of "core" and "coretest" targets for quicker build and dev cycle

 * Make Filter::Util::Call the default engine for PDL::NiceSlice

 * Make PDL_Anyval type, for 64-bit purposes

 * Clean up and better-comment pdl*.h

 * Make "isn't numeric in null operation" warning more helpful

v2.007_12 2015-03-06 09:18:04-05:00

General Notes:

 * Counting down to a PDL-2.008 release this February 2015

 * This release marks the completion of almost all the
   priority issues needed for PDL-2.008.  Expect feature
   freeze, final shakedown, and release to come!


Highlights:

 * Fixed sf.net bug #373  2.007_11 MANIFEST

 * Implemented 'core' and 'coretest' targets for quick testing.

 * Fix quote/whitespace build problems

 * Fix threading problem discovered in PDL::MatrixOps::inv()

 * Build improvements and support for automated commit testing
   via the travis-ci infrastructure

 * Fixed sf.net bug #368 PDL::Slatec::polyfit ignores
   incorrect length of weight ndarray
 
 * Fixed sf.net bug #374 CONFIGURE_REQUIRES => Devel::CheckLib 

 * Tests and fixes for modulus operator for 64bit integer
   operands.  Tests on 32bit systems welcome.

 * Lots of tweaks and cleanup...

v2.007_11 2015-02-24 16:08:36-05:00

General Notes:

 * Counting down to a PDL-2.008 release this February 2015
Highlights:

 * The new Filter::Simple engine for PDL::NiceSlice is now
   the default.  This fixes problems where PDL::NiceSlice
   was applying the sourcefilter to the content of comments
   and strings.  Still to do: implement for command line use
   in perldl/pdl2 shells.

 * Added ability to call PDL::Graphics2D twiddle() routine with
   an argument of 0 or 1 (technically false or true) to set
   whether the twiddle loop is run.  Also fixed a minor warning
   generated with 'use warnings'.  This closes bug #353.
 
 * Lots of clean up and build process improvements.



v2.007_10 2015-02-02 10:59:22-05:00

General Notes:

 * Counting down to a PDL-2.008 release this February 2015

Highlights:

 * More clean up to build process.



v2.007_09 2015-01-29 11:01:24-05:00

General Notes:

 * Counting down to a PDL-2.008 release this February 2015

Highlights:

 * perl 5.10.x is now the minimum version of perl supported for
   this release.  Please test.

 * Much clean up of the EU::MM build process by Ed.:w



v2.007_08 2015-01-20 18:24:01-05:00

General Notes:

 * Counting down to a PDL-2.008 release this January 2015

Highlights:

 * Some ExtUtils::MakeMaker fixes and clean up for the PDL build
   process.

 * Fix non-portable usage bug in t/vsearch.t which prevented the
   test from passing on perls 5.12 and earlier



v2.007_07 2015-01-06 17:44:08+11:00

General Notes:

 * Counting down to a PDL-2.008 release this January 2015

Highlights:

 * This release includes the new pre-generated pm/pod to
   clean up the docs available on-line on metacpan.org and
   search.cpan.org.
 
 * Bug fix in t/vsearch.t to support perl 5.12 and earlier.
   PDL currently supports perl 5.8.x and later.



v2.007_06 2015-01-05 13:31:13-05:00

General Notes:

 * Counting down to a PDL-2.008 release this January 2015

Highlights:

 * Fixed a number of bugs on the sf.net tracker

 * Fix for EU-MM-7.0 and later problem with dmake

 * Include generated pod in the distribution so that
   metacpan.org and search.cpan.org have better/working
   online docs.



v2.007_05 2014-12-24 09:24:04-05:00

General Notes:

Highlights:

 * You can now: "use Inline with => 'PDL';" - see PDL::API

 * You can, in your module's Makefile.PL: "$p = new ExtUtils::Depends
   'MyMod', 'PDL'"

 * Various bugs fixed

 * New vsearch() implementations with features and flexibility



v2.007_04 2014-09-09 00:44:29+01:00

General Notes:

Highlights:

 * You can now: "use Inline with => 'PDL';" - see PDL::API

 * You can, in your module's Makefile.PL: "$p = new ExtUtils::Depends
   'MyMod', 'PDL'"


v2.007_03 2014-07-01 16:54:59-04:00

General Notes:

Highlights:

 * Fix documentation builds for installs into vendor directory.

 * Fixes for library detection on MS Windows

 * Fix incompatibility of PDL::IO::Storable with perl versions < 5.10.x



v2.007_02 2013-11-25 14:10:22-05:00

General Notes:

Highlights:

 * This release should be a working PDL::IO::Storable that
   is compatable with the new 64bit index support.
 
 * PDL::IO::Storable now requires perl 5.10.x or greater
   although the overall distribution requirements are not
   planned to update to 5.10.x until the completion of
   fixes for the longlong hidden double precision conversion
   slash truncation bug.



v2.007_01 2013-11-17 16:31:17-05:00

General Notes:

Highlights:

 * Added FAQ entry on PDL version numbering change and how
   to specify required PDL versions.

 * Corrected perldl.conf docs for WITH_PLPLOT in the comments

 * Update PDL::IO::Storable to work with the new PDL_Indx
   data type.  Also made the code backwards compatible to
   read files written by older PDL releases.
 
 * Fixed NaN handling for min/max and cleaned up handling
   of empty sets.

 * Various enhancements to PDL::Transform



v2.007 2013-10-12 12:56:52-04:00

General Notes:

 * PDL computations now use 64bit indexing/addressing if
   your platform supports it (i.e., your perl configuration
   has $Config{ivsize} == 8).
   
   - You can process with pdls with more then 2**32 elements.

   - Memory mapped file IO supports up to 8TB files which
     allows much simpler processing of large data files.
     (See mapflex in PDL::IO::FlexRaw for details)

 * PDL-2.007 has a new, unified slicing engine and syntax
   that consolidates the multiple slicing variants into
   a backward compatible but now 64bit aware slice.  See
   the PDL::Slices for the new syntax that is enabled.

 * PDL::FFTW has moved to its own distribution on CPAN
   and is no longer in the PDL core distribution.  Look
   for PDL::FFTW3 coming to CPAN soon.

 * Some required dependencies have been update to more
   recent versions:

   - ExtUtils::MakeMaker now requires version 6.56 or
     higher, the minimum version with CONFIGURE_REQUIRES
     support.

   - Perl OpenGL 0.6702 is now required for PDL::Graphics::TriD
     to build.  This fixes a number of critical bugs and should
     be a seamless upgrade.

   - File::Map version 0.57 is required.  This fixes map_anonymous
     support for the >2**32 sizes needed for 64bit support.
     Legacy mmap support for unix platforms is no longer
     supported.  The distribution requires File::Map so you
     should not notice the change.

 * Incompatible Changes:

   - PDL::FFT now uses the same sign convention as FFTW and
     the rest of the world, -1/+1 for forward and reverse
     FFT respectively.

   - C/XS API of PDL-2.007 is incompatible with previous
     PDL releases.  If you upgrade to PDL-2.007, you *will*
     need to re-install or upgrade *all* dependent XS or PP
     based modules.

   - PDL now auto-promotes array refs in many places that
     previously required an ndarray (so you can say, e.g.,
     "$a->index([2,3])" instead of "$a->index(pdl(2,3))").

   - String syntax for slice() specifications now ignore
     white space.

 * The clean up of the PDL core distribution continues and
   PDL-2.007 is no exception.  Many bug fixes, documentation
   updates, code and implementation improvements make this
   the best testing PDL release to date.


Highlights:

 * FITS IO improvements and fixes:

   - Added 'afh" option to rfits to allow explicit use of
     legacy hash parser for performance reasons.  

   - New multiple extension writing support for wfits.

 * Added pp_deprecate_module() to PDL::PP

 * New mode/modeover functions in PDL::Ufunc

 * Made exception handling in slices more robust.

 * PDL::CLONE_SKIP added for improved ithread support.

 * Updated graticule() in PDL::Transform::Cartography to
   support NaN-delimited output.

 * Bugs fixes:

   - Fix %hash randomization bugs in PDL tests

   - Fix OpenBSD pthread build problem for non-threaded perls

   - Fix PDL::shape to return vector for 1-D ndarrays

   - Fix badvalue-on-truncate support for map and for interpND

   - Fix for MSVC++ 6.0 to build on 32bit systems.
     MSVC++ 6.0 cannot be used to build 64bit index support.

   - Fix polyfit() handling of BAD values and various edge cases.

   - Fix rare "Bizarre copy of HASH in scalar assignment"

   - Fix rcols with colsep and $PDL::undefval

   - Fix sf.net bug #331 "uniq does not always return proper object"

   - Fix sf.net bug #338 PDL::FFT uses backwards sign convention from FFTW

   - Make PDL::NiceSlice preserve line numbering (sf.net feature #75)

   - PDL::IO::GD->new() is now less picky about it args, and no longer crashes

   - Two bug fixes to transform.pd, and an augmentation



v2.006 2013-03-23 10:02:31-04:00

General Notes:

 * Change to the version number scheme used for PDL
   from the dotted-integers format back to plain old
   decimal numbers.

   Unfortunately, PDL has used both alternatives before
   and in an inconsistent, out-of-order way.  With this
   release, the current version will also be the most
   recent version with respect to both numbering schemes.
   
   For more details see David Goldens blob post on
   the topic and the pdl-porters list discussion:

     http://www.dagolden.com/index.php/369/version-numbers-should-be-boring/
     http://mailman.jach.hawaii.edu/pipermail//pdl-porters/2013-February/005343.html
 

 * PDL-2.006 also showcases the demos of two new PDL graphics
   modules in the perldl/pdl2 shells:
   
    - PDL::Graphics::Gnuplot
      http://search.cpan.org/~zowie/PDL-Graphics-Gnuplot-1.4/

    - PDL::Graphics::Prima
      http://search.cpan.org/~dcmertens/PDL-Graphics-Prima-0.13/

   Both modules install on all supported PDL platforms.  A
   recent addition is PDL::Graphics::Simple which provides
   a uniform presentation to the variety off available PDL
   plot/view/print options.
   
    - PDL::Graphics::Simple
      http://search.cpan.org/~zowie/PDL-Graphics-Simple-1.004/README.pod
      
   Let us know how they work for you.  As they are 
   relatively "young" contributions your feedback and
   questions are always welcome.


 * PDL Distribution related updates:

    - Fixes a build issue for PDL at ASPerl
    
    - Many fixes for debian distributions.
    
    - PDL::IO::NDF has been moved to its own
      distribution on CPAN.  This could affect
      upgrades from older PDL installs.
 

Highlights:

 * New support for reading IDL format files via PDL::IO::IDL.

 * Added an unpdl method which is (roughly) the inverse
   operation of pdl (Joel Berger).

 * Updated polyfill and polyfillv routines to the algorithm
   from pnpoly: more accurate on edge pixels and faster due
   to its PP implementation (Tim Haines).

 * Added Boundary=>'Replicate' option to conv2d and med2d (chm).

 * Support for new additional random number generators to
   PDL::GSL (John Lapeyre).

 * Add lgamma support for MinGW-built perls with tests
   to match (sisyphus).

 * Many improvments to docs and their generation from
   PDL sources.  Specific new functionality support:

    - Newly refactored docs engine using core perl
      modules rather than PDL-only ones (Joel Berger)

    - New FullDoc key added to PDL::PP makes writing CPAN
      friendly .pd files much, much easier (David Mertens).

    - New PDL::Doc::add_module() routine to add an external
      module's POD (with PDL::Doc conventions) to the PDL
      docs on-line database (Craig DeForest).

 * Many bugs fixed, some even before a ticket could be opened!

    - Sf.net bug #3607936: Fixed a bug causing crashes
      due to using inplace with a duplicate argument.

    - Sf.net bug #3603249: AutoLoader leaks $_ into local
      context, reported and fixed by Craig.

    - Sf.net bug #3588182: Fixed hist() handling of the case
      of fractional steps in integral input data types.

    - Sf.net bug #3563903: Fixed bug in PNG format detection
      on win32 platforms.  

    - Sf.net bug #3544682: Fixed error report bug in perldl
      that resulted from a change in the way perl handles
      eval exception reporting.

    - Sf.net bug #3539760: qsort[vec] are now inplace aware.

    - Sf.net bug #3518190: Potential fix for t/gd_oo_tests.t
      test crashes.

    - Sf.net bug #3515759: Work around for PDL::GIS::Proj
      build failures with proj-4.8.0.

    - Sf.net bug #3479009: Fixed dummy() to generate a
      valid syntax for the underlying call to slice().

    - Sf.net bug #3475075: Fixed 16-bit PNM raw format handling.

    - Added warning if conv1d is used on an ndarray with
      the badflag set.

    - Fix NaN sign issues as reported (and fixed!) by
      Matthew McGillis with contributions by Sisyphus.

    - Fix rim() 3-arg form.  Added tests to support and
      verify the development.

    - Fixed a problem with multiple windows and imag2d
      and imag2d_update.

 * The PDL shells keep getting better:

    - New feature in perldl and pdl2 where a pattern matching
      the PDL shell prompt (in $PERLDL::PREFIX_RE) will get
      stripped off of input lines before eval.  This makes it
      easier to cut-and-paste example text from PDL shell
      sessions or from the PDL Book into an active session.

    -  Added a demo for PDL::Graphics::Prima to the PDL shells.

    -  Added a demo for gnuplot to the PDL shells.

    -  The p shortcut to display output in the PDL shells has
       been reverted to its previous 2.4.10 behavior.  If you
       wish it to be an exact alias for print just override
       in your .perldlrc or local.perldlrc file.



v2.4.11 2012-05-20 13:32:17-04:00

General Notes:

 * This is a point release of PDL to support the coming perl
   5.16.0 release.

Highlights:

 * A new implementation mapflex and mapfraw routines provides
   memory-mapped IO for all platforms including win32 systems.

 * The new memory mapped IO support is implemented using
   File::Map so version 0.47 has been added as a required
   dependency to force automated testing so an automated build
   will need this dependency installed.
   
    NOTE: For systems having POSIX mmap, a manual build of
    PDL will automatically use the legacy implementation.

 * Various cleanup to existing code to fix warnings generated
   by perl versions 5.15.x and higher.
 
   Remove deprecation warning in PGPLOT/Window/Window.pm
   complex.pd - fix attempts to overload '<=>=' and '=>'

 * Sf.net bugs fixed:

    3518253  Make PDL::flat work under perl 5.16 (thanks sprout!)
    3516600  pdl_from_string.t fails w/ BADVAL_USENAN=1
    3487569  PDL::IO::Misc : rcols problem (thanks bperret!)
    3476648  PDL build of HTML docs fails on recent bleed Perl
    
 * Other bugs fixed:

    Fix check for glutRunning logic for imag2d
    Fixed a bug in cat's error reporting.
    Added lvalue awareness to whereND

 * New and improved tests have been added to the test suite.

    Tests t/gd_oo_tests.t and t/inline-comment-test.t are
    skipped for BSD platforms (see sf.net bugs #3518190 and
    #3524081 to track their issues).

 * New support for multi-line comments in PP code.  See docs for
   PDL::PP for details (e.g., pdldoc PP).
    
 * Various enhancements to barf/croak output and messages to make
   error reports and stack traces more useful and readable.

 * There is a new changes (or Changes) target for the PDL Makefile
   which is a convenience target that allows one to regenerate the
   Changes file from git.

v2.4.10 2012-02-03 18:44:47-05:00

General Notes:

 New Stuff:

  * PDL::Constants module provides E, PI, I (or J) and more.

  * PDL::NiceSlice has a new engine based on Filter::Simple
    which is more selective about where the PDL::NiceSlice
    sourcefilter is applied.

  * pdl() constructor now accepts a string argument which
    can include MATLAB-style [ ; ] syntax, bad values,
    inf values, and nan values.  This makes it much easier
    to specify pdl values in programs and scripts.

  * PDL now supports pthreads on all platforms as well
    as a new, auto-parallelization capability for PDL
    threadloops across multiple processors using the
    PDL::ParallelCPU module.

  * Many(!) bug fixes.


 Incompatible Changes:

  * List output from whichND is now deprecated.

  * The default.perldlrc uses PDL::Constants to
    provide E and PI.

  * perldl.conf has new fields so be sure to update
    any local versions you use with the new fields.

  * rcols and wcols always use dim0 for the data
    dimension and dim1 for the column dimension.
    This only matters if you use the support for
    reading multiple columns into a 2D pdl.

  * Makefile.PL now requires at least version 6.31
    of ExtUtils::MakeMaker to support the new standard
    INSTALL_BASE option matching Module::Build usage.

  * Prerequisite Text::Balanced minimum version is
    now 1.89 although this is not expected to be an
    issue because it is provided in the perl core
    since 5.8.0.


Highlights:

 * General cleanup of code, including restructuring for clarity.
 
 * List output from whichND() is now deprecated.  whichND() now returns
   an ndarray of coordinates in all cases with a warning when a list
   context is detected.  See the docs for work-arounds to your code.
 
 * PDL::IO::Misc now has better support for handles that are not
   files (e.g., pipes or standard input) for rgrep(), rcols(),...
 
 * Added bad value support to pctover() and oddpctover().
   This was sf.net feature #3328001.
 
 * New whereND() routine provides the same functionality as where
   but with support for multi-dimensional masks and implicit
   threading over higher dimensions.  This was sf.net feature
   request #3390043.
 
 * Many bugs fixed.
 
     3059083  Problems with FITS header handling
     3080505  PLplot segfaults on plshades call on OS X
     3285520  status message from gslmroot_fsolver
     3294808  sever on Empty ndarray causes segfault
     3295544  NiceSlice parsing bug
     3299611  FITS I/O obscure bug
     3300467  NiceSlice asterisk parsing issue
     3307121  wmpeg sometimes kills perldl if file already exists
     3307613  indexND of Empty pdls can segfault
     3368883  t/opengl.t fails if display type not available
     3375837  _read_flexhdr state machine fails
     3388862  tiny bug in PDL-2.4.3. May apply to 2.4.9
     3391645  bad printf formats in pdlapi.c and others
     3394327  PDL::IO::FITS::wfits corrupting FITS image
     3396738  PDL::Core::convert default return type
     3410905  t/pgplot.t hangs test harness for PDL
     3415115  whereND fails to handle all zero mask case
     3428356  PDL::Transform::map output FITS header is slightly wrong
     3434842  Error in definition of gsl_sf_laguerre_n function
 
 * PDL::Constants now provides: E, PI, I and J and is loaded by the
   default.perldlrc.  It is not yet part of 'use PDL' so you'll need
   to 'use PDL::Constants ...' by hand for now.
 
 * default.perldlrc sets $PDL::IO::FlexRaw::writeflexhdr=1 by
   default so that writeflex() to a filename automatically writes
   the header file.  This is different from the previous behavior
   but it seems to "do what you mean".  Feedback welcome!
 
 * PDL::NiceSlice now has a new engine based on Filter::Simple which
   is smarter about only applying the slicing source filter to syntax
   occurring outside of POD, comments, and quotelike strings.  The
   new implementation is available for *files* by setting the
   PDL_NICESLICE_ENGINE environment variable to 'Filter::Simple'.
 
   Work is underway to port the new niceslice filter implementation
   to perldl/pdl2.  Once this task is completed, the new engine will
   become the default source filter and the PDL_NICESLICE_ENGINE
   environment variable will be removed.
 
 * There is experimental support for PDL::NiceSlice syntax in the
   perl debugger (i.e., perl -d).  Just set the PERL5DB environment
   variable to 'BEGIN { require "PDLdb.pl" }' to use niceslice
   from the debugger command line.  If PERL5DB is already set,
   you'll need to adjust the above recipe accordingly.
 
 * Better handling of build configuration options from perldl.conf
   as well as improvements in the detection of external dependencies.
 
 * perldl.conf has some new fields added:
    - POSIX_THREADS_INC and POSIX_THREADS_LIBS to specify
          locations of your pthread header file and library
    - PDL_CONFIG_VERSION to track the perldl.conf VERSION
    - PDLDOC_IGNORE_AUTOLOADER to control pdldoc behavior
    - PDL_BUILD_DIR provides the build directory path
    - PDL_BUILD_VERSION provides the PDL build version
          (to help with ambiguity from multiple PDL installs)
 
   NOTE: If you are using a private or customized perldl.conf
   file, please be sure to update with these additional fields
   as the perl Makefile.PL doesn't yet detect version skew
   automatically.
  
 * PDL::IO::Browser now builds in many cases (but not all).
   If you try it, please let us know how it goes.  Just edit
   the value of WITH_IO_BROWSER in your perldl.conf before
   configuring the build (i.e., perl Makefile.PL).
 
 * PDL::PP has seen some significant improvements including
   code cleanup, improved documentation, and code refactoring
   for comprehension.  There is a new PDL::PP::pp_line_numbers()
   routine which enables line # traceback for errors and warnings
   from PP code.
 
 * Improved error output from the pdl2 shell via the new
   CleanErrors plugin which filters out the non-PDL part
   of the error output leading to *much* more concise and
   helpful reports.
 
 * The pdl() constructor now accepts a string argument which
   allows for writing pdls using a matlab/octave style
   syntax as well as cutting and pasting from interactive
   session output to create pdls initializations for scripts
   and program files.
   
   The new constructor also allows for inf, nan, and bad to
   generate the appropriate values (case insensitive), e.g.,
 
      $bad = pdl q[1 2 3 bad 5 6];  # Set fourth element to the bad value
      $bad = pdl q[1 2 3 BAD 5 6];  # ditto
      $bad = pdl q[1 2 inf bad 5];  # now third element is IEEE infinite value
      $bad = pdl q[nan 2 inf -inf]; # first value is IEEE nan value
 
   This is new functionality so feedback and problem reports
   are welcome.
 
 * PDL::Image2D has new routines: pnpoly() to determine the points
   in a polygon from the sequence of vertex coordinates, and
   cc4compt() for 4-component labeling of a binary image.
 
 * PDL now supports pdls larger than 2GiB.  The element count
   is still an int type internally so the total number of elements
   per-ndarray must be less than 2**31.
 
 * POSIX threads (pthreads) are supported for win32 and cygwin
   platforms.  Pthreads are now available for all PDL platforms.
 
 * New PDL::ParallelCPU module provides automatic distribution
   of implicit thread loops across a number of processors.  Now
   you can watch your PDL computations maximize the load on
   *all* your processors.  See the docs for how to configure this
   feature and how to adjust your calculations to best take
   advantage of this feature.
 
 * PDL::Graphics::PLplot now works with the latest release of the
   PLplot library and has improved configuration and build
   handling.  Feedback welcome.
 
 * rcols() and wcols() now use the same convention for multi-column
   input and output: dim0 is *always* the data dimension and
   dim1 corresponds to the columns in the file.  This adjustment
   makes them their inverse operations.
 
 * The ADEV calculation in statsover has been corrected along
   with the documentation.
 
 * PDL::Graphics::TriD changes:
    - PDL::Graphics::TriD now builds using the perl OpenGL
          module (POGL) when configured on cygwin with the
          interface=W32API option.  By default, POGL used
          interface=GLX on cygwin which does software rendering
          via Mesa/X11 (slower!).  If you reinstall POGL with
          the W32API setting, you will need to rebuild PDL and
          PDL::Graphics::TriD to pick up the new configuration.
    - A new 4-line graphics demo contributed by Mark Baker has
          been added to 'demo 3dgal'.  Take a look.
 
 * Various enhancements to FITS handling, including:
   - add map() fix for nonlinear FITS headers
   - Enable hdrpcy() in rfits() for Rice-compressed images
 
 * Test suite improvements to provide better diagnostics from
   failures and to make tests more correct avoiding "false fails"
   in the test reports.  Various tests have been migrated to use
   File::Temp::tempdir and File::Temp::tempfile to improve the
   robustness for temporary files and directories naming and
   creation during tests.
 
 * Update ExtUtils::MakeMaker required version to 6.31 to support
   the new standard of INSTALL_BASE to configure for a local
   perl/PDL module installation.
 
 * Update Text::Balanced required version to 1.89.  This is the
   version present in perl 5.8.0 (the minimum required for PDL)
   so this change in requirement is not expected to affect any
   PDL users.
 
 * pdldoc now searches your PDLLIB path for PDL::AutoLoader docs
   in addition to the pre-extracted documentation database.  This
   makes pdldoc give the same output as the help command in the
   PDL shells.
 
 * Many updates and additions to the PDL documentation.
 
 * Devel::CheckLib is being used in more places during the
   PDL configuration stage.  We plan to make this the standard
   baseline for dependency library detection going forwards.
   The included copy of Devel::CheckLib has been updated to 0.95.
 
 * A new unified implementation of barf()/warn() for PDL removes
   code duplication.  barf() is now defined in both PDL::Core and
   the PDL packages.  PDL::cluck is added as an analog of Carp::cluck
   (as PDL::barf is an analog of Carp::confess).  barf() now
   generates its stack trace by hooking into Carp::confess on
   both the Perl and C sides.
 
 * Various fixes for PDL::Transform
   - fix inverse in perspective()
   - fix t_cubic() parameter parsing
   - fix handling of multiple PCi_j systems in the ndarray header
 
 * Added SIGPIPE handlers to cases where PDL uses pipes to/from
   external processes (such as ffmpeg or some NetPBM image
   converter programs).  This should make PDL "SIGPIPE safe" by not
   exiting when a PDL piped IO output process quits (e.g., as when
   called from within the perldl/pdl2 shell).



v2.4.9 2011-04-09 10:05:43-04:00

General Notes:

 * Fixes a couple of surprise bugs that were discovered
   immediately with the PDL-2.4.8 release.

 * See Also: the Release Notes for PDL-2.4.8 below


Highlights:

 * Fix sf.net bug #3267408 "t/slice.t crashes in tests 68-70 for BSD"
 
 * Fix sf.net bug #3190227 "PDL build fails with parallel GNU make -j3 -j3"

 * Fixed various tempfile name generation problems by switching
   to File::Temp instead of hand rolled solutions.  This is the
   recommended approach going forward.

 * Force Convert::UU usage for BSD to work around a t/dumper.t
   failure on MirBSD.



v2.4.8 2011-03-29 17:12:41-04:00

General Notes:

 * The deprecated Karma imaging library support code
   has been removed from the PDL distribution.
 
 * Perl OpenGL (POGL) is now the only build option for
   3-D graphics support in PDL.  The POGL build has
   proven to be portable and reliable.  This prepares
   TriD graphics development for the next stage of
   re-factoring for support and new features.
 
 * Many improvements to the PDL configuration, build
   and test process make this the most robust PDL yet.
 
 * PDL::IO::FlexRaw now supports automatic header file
   creation when writeflex() is given a filename argument
   for writing.  readflex/writeflex/mapflex now support
   reading and writing ndarrays with bad values in them.
 
 * New PDL::Constants module provides PI and E.

 * PDL::Complex now supports in-place operations.

 * Added $PDL::toolongtoprint to set the maximum ndarray
   size allowed to print as a string.  This was added
   to the default.perldlrc to make it easier to discover
   by users.

 * wmpeg() from PDL::IO::Pic uses the new ffmpeg back-end
   and can create many additional file formats beyond MPEG
   alone, including MP4 and animated GIF.  See the
   documentation for details.
 
 * Lots of improvements to the documentation, overall
   usability and many bugs fixed!

Highlights:

 Build and Test Enhancements:

 * Karma support code has been *removed* from the PDL
   distribution The last stable PDL distribution with
   Karma code was be PDL-2.4.7.
   
 * You must use the Perl OpenGL module to build the
   PDL 3-D graphics module, PDL::Graphics::TriD.
   OPENGL_LIBS, OPENGL_INC and OPENGL_DEFINE are no
   longer used by perldl.conf for the configuration
   process.
   
 * Added a check for mis-installed PROJ4 libraries.  If
   the library does not initialize (even if present) then
   PDL will not build the PROJ4 modules.  This is sf.net
   feature #3045456.
   
 * GD, HDF, PROJ4, OpenGL, and GSL tests will not be run
   unless the corresponding module was configured to be
   built.  This addresses the possibly mysterious test
   failures caused by previous PDL installations in the
   perl path at build time.
   
 * Use of the Test::More TODO {} blocks allows tests for
   known bugs to be added to the test suite without 
   causing the suite to fail.  This replaces the previous
   SKIP_KNOWN_PROBLEMS option and should better enable
   test first development and debugging.
   
 * utils/perldlpp.pl is a new script for off-line source
   filtering to pre-filter PDL source files with NiceSlice
   constructs.  This allows PDL to use NiceSlice constructs
   in the core functionality while still allowing PDL to
   work in environments where source filters are not supported.
   
 * The 'perl Makefile.PL' response to detecting another PDL
   in the build path has changed.  If such a pre-existing PDL
   installation is detected, the user is warned *but*
   configuration and build will proceed nonetheless.
   
 * Clean-up and fixes to demos and tests for reliability and
   portability.

 Documentation:

 * Added INTERNATIONALIZATION file with i18n notes.  PDL
   does yet not have internationalization support beyond
   that provided  by perl itself.
   
 * Cleared up the documentation on when to use lu_decomp
   and versus lu_decomp2.  Now that lu_decomp is threaded,
   it is the preferred implementation.
   
 * wmpeg() with the ffmpeg converter supports generation of
   many different output video file formats including MPEG,
   MP4, and animated GIF.  Documentation on these uses were
   added.

 * New example code refresh.pdl in Example/PLplot to
   provide for PLplot, some of the same functionality
   as in PDL::Graphics::PGPLOT.
   
 * Other documentation updates for clarity and correctness.

 New Features or Functionality:

 * New PDL::Constants module providing PI and E (so far)
   
 * Inplace support added for PDL::Complex operations
   
 * pdldoc and the pdl2/perldl help commands now print all
   matches by default when multiple matches are found.

 * A do_print command was added to the pdl2 shell which
   toggles the input mode between printing and not
   printing the return value of each command.
   
 * readflex/writeflex/mapflex now support reading and writing  
   ndarrays with bad values in them. This was sf.net feature
   request #3028127, "add badvalue support to FlexRaw".
   
 * writeflex now supports automatically calling the
   writeflexhdr() routine if you have set the variable
   $PDL::FlexRaw::writeflexhdr to a true value and are
   writing to a file given by filename as argument.
   
 * Updated the error handling for GSL::INTERP to match other
   GSL module usages.
   
 * Applied sf.net patch #3209075 IO::HDF square sds
   
 * New binary blob support in PDL::IO::GD::OO

 Bugs Fixed:

 * Applied Christian Soeller's patch for FFTW on 64-bit
   systems.  This resolves bug #3203480 "t/fftw.t fails
   on 64-bit systems".
   
 * Fixed sf.net bug #3172882 re broken threading in inv().
   inv() and lu_backsub() now handle threading.  Updated
   documentation for lu_decomp, lu_deomp2, and lu_backsub.
   
 * Fixed sf.net bug #3171702 "missing podselect command
   breaks PDL build"
   
 * Fixed sf.net bug #3185864 (bad adev in statsover)
   
 * Fixed sf.net bug #3139697: fixed imag2d() to work better
   with Mac OS X GLUT and not just FreeGLUT.
   
 * Fixed uniqind bug #3076570
   
 * Fixed SF bug #3057542: wmpeg doesn't error on missing
   ffmpeg program.  Now wmpeg returns 1 on success and
   undef on error.  If ffmpeg is not in PATH, it just fails
   immediately....
   
 * Fixed SF bug #3056142: pdl2 fallback to perldl broken
   on win32
   
 * Fixed SF bug #3042201: t/dumper.t fails mysteriously
   
 * Fixed SF bug #3031068: PDL::IO::FlexRaw mapflex memory
   mapping fails
   
 * Fixed SF bug #3011879, "pdl() constructor crashes perl for
   mixed ref/ndarray args" and #3080505, and #3139088.  This
   fix also includes a larger and more complete set of tests.
   
 * Fixed segfault in plplot.t with a work-around.
   
 * Fixed bug in readenvi.pdl header list value processing
   and added support for embedded file headers.
   
 * Fixed bug in FlexRaw.pm support for headers with Type
   passed  as string.
   
 * Fixed imag2d() in PDL::Graphics2D.  It no longer calls
   exit on ESC if run within the pdl2/perldl shell.  Also
   did some clean up of key controls and module mechanics.
   
 * Fixed upstream bug in Devel::REPL for MultiLine
   continuation.  Now incomplete q[] and qq[] constructs
   continue reading until properly closed.  See the
   Known_problems file for details.


    
v2.4.7 2010-08-18 20:55:52-04:00

General Notes:

 * New requirements:
   - perl version 5.8.x and higher
   - Convert::UU
 
 * PDL::Graphics::TriD now requires OpenGL-0.63
 
 * New 2-D image display routine: imag2d()

 * pdl() constructor, a.k.a. PDL->new(), now
   takes string arguments with either MATLAB type
   concatenation syntax or PDL print output (for
   easier cut-and-paste from PDL shell sessions).

 * Improved text and comma separated value file
   input via rcols(): faster and more flexible.
 
 * A new PDL shell based on Devel::REPL (i.e.,
   Moose technology).  The new shell supports
   more perl syntax (lexical variables and
   packages), is more extensible (via a system
   of plugins), and supports many forms of file
   and variable completion.
   
   Install Devel::REPL and give it a try!
   User feedback welcome.

 * More portability (builds on more platforms
   with more features than ever).

 * Many bugs fixed...


Highlights:

 * General

   OpenGL-0.63 is required for PDL::Graphics::TriD.

   Convert::UU is required for PDL.

   Karma is DEPRECATED and NOT SUPPORTED.  Set
   USE_KARMA=>1 in perldl.conf to force a build.
   
   
 * New 2D Image Display Feature: imag2d()

   See PDL::Graphics2D for documentation.

   Add image pixel value display on mouse
   click in imag2d window
   
   Add keyboard command shortcuts for imag2d
   (with placeholders)

   Fix a number of imag2d() usabiilty bugs
   
   
 * pdl() Constructor Can Take String Input

   Allows use of MATLAB-style [ ; ] syntax

   Allows cut-and-paste of printed pdl values
   as input args for pdl()
   
   
 * rcols/wcols Improvements

   Much faster read times

   Multiple columns can read into a single
   pdl varible

   Symmetric handling of perl and pdl
   column data

   Improved format support for CSV file input
   
   
 * Enhanced PDL Shell (Version 2)

   Based on Devel::REPL which must be installed
   along with either Term::ReadLine::Perl or
   Term::ReadLine::Gnu to use the pdl2 features.

   Supports Term::ReadLine::Perl and Term::ReadLine::Gnu.

   Upward compatable with the original PDL shell, perldl.

   Adds completion and command line editing support
   across all PDL platforms.

   Adds support for current package and lexical variables.

   Toggle default print output via the do_print attribute.

   Default prompt for perldl and pdl2 is now 'pdl> '

   help vars now shows results alphabetically

   pdl2 now runs (falls back to) perldl if Devel::REPL
   is not installed or if Term::ReadLine::(Perl|Gnu) is
   not installed.
   
   
 * Other Features

   Fix wmpeg() to use ffmpeg to generate the
   video (sf.net feature request #3010984).

   Added tiled compressed image handling to rfits

   Faster matrix multiply

   Preliminary support for ENVI file format data
   in PDL/IO/ENVI/readenvi.pdl
   
   
 * Build Improvements:

   PDL build process now detects multiple PDL installs
   and warns of possible conflicts.

   'use PDL' now loads PDL::Config by default.

   PDL "as built" configuration is now saved to %PDL::Config

   Changes file is automatically updated each release

   Add SKIP_KNOWN_PROBLEMS support for build

   Add checks to prevent warnings from access to $HOME
   when it is not defined.
   
   
 * Portability Fixes

   Multiple build improvements for debian platforms

   Improved portability across perl and compiler versions

   Reduced number of fortran dependencies

   Improved support for win32 platforms
   - PDL::GIS::Proj builds for win32
   - PDL::Transform::Proj4 builds for win32
   - PDL::Graphics::PLplot builds for win32
   - PDL::IO::Dumper builds for win32
   
   
 * 3-D Graphics

   Improved PDL::Graphics::TriD demos and examples

   Fixed problems with VRML support for many platforms.

   Better dependency searches for OpenGL during PDL build

   Removed warnings "noise" when used with perl -w

   New spheres3d routine added to PDL::Graphics::TriD
   
   
 * Bugs Fixed

   Fix PDL::AutoLoader to handle win32 PDLLIB path
   syntax with ; as separator. 

   Fix PDL::Complex::string and sum and sumover
   (sf.net bug #1176614)

   Fix PDL::Config does not match actual build
   configuration (sf.net bug #3030998).

   Fix dimension numbering in PDL::Transform::t_fits

   Fix jpegtopnm problem in proj_transform.t

   Fix rt.cpan.org bug #53815 in IO/HDF/SD/SD.pd

   Fix rt.cpan.org bug #59126 in isempty pod

   Fix sf.net bug #2901170 re overly verbose warnings when
   running TriD with perl -w

   Fix sf.net bug #3011143 re whitespace in perl path

   Fix sf.net bug #3021578 re missing xtra dummy dims

   Fix threading with lu_decomp and lu_backsub
   (sf.net bug #3021567)

   Fix uniq and uniqind NaN and BAD value handling
   (sf.net bug #3011659)

   Fix uniqvec bug where it did not return a 2-D result
   (sf.net bug #2978576)

   Fix uuencode/uudecode detection logic in PDL::IO::Dumper
   to include Convert::UU check

   Make PDL prompt/warn if space in build path
   (sf.net bug #2924854).

   Fix up code to not crash on non-lazy linking systems.

   Work arounds for perl-d lvalue temp bug introduced
   in recent perls.

   t/lvalue.t is skipped if run under the debugger. 

   Fix format string attack errors in GSL, PGPLOT,
   and Transform.
   
   
 * Many Documentation Improvements

   Completely reworked PDL web site
   - Clearer and more helpful to new PDL users.
   - See http://pdl.perl.org for the latest!
      
   New documentation:
   - Migration guide for MATLAB users.
   - Migration guide for Scilab users.
   - Threading tutorial.

   Major reorganization of documentation to better
   help new users
   - A guide to PDL's tutorial documentation.
   - A guide to PDL's module reference documentation.
   - A study course through all of PDL's documentation.
   - Removed PDL::Intro

   POD cleanup across many PDL modules and functions.

   Update to copyright statements throughout PDL
   to clarify licenses.

   Improved on-line help and apropos features in
   the PDL shell

   Updated FAQ

   Improved POD to HTML translation

   DEPENDENCIES for PDL updated and checked
   for applicability.

   INSTALL guides improved in the distribution
   and on the web site.



v2.4.6 2009-12-31 23:06:11-05:00

General Notes:

 * Mainly a bug fix and polishing release


Highlights:

  * Improved 3D graphics and OpenGL functionality

  * imag2d() routine for multi-image (photo) display

  * Many fixes for Debian package release

  * Several little bugs fixed since PDL-2.4.5

  * Fixed some issues with PDL convolution routines

  * Improved documentation and release notes and files

  * Padre and enhanced perldl shell integration begun


Summary of Changes:

  * Improved 3D graphics and OpenGL functionality

    Perl OpenGL 0.62 is the minimum required version
    for PDL::Graphics::TriD to build.

    TriD now builds correctly for Mac OS X systems
    without X11 installed.

    Autoprobe for build of 3D graphics and the use
    of the Perl OpenGL library has been implemented.
    The default perldl.conf setting is to check.

    Improved multi-window support for PDL::Graphics::TriD
    display windows: the GLUT window ID is now part of
    the default window title for convenience, and redraws
    with multiple open TriD windows are handled correctly.
    
  * imag2d() routine for multi-image (photo) display

    REQUIRES: The Perl OpenGL TriD interface and FreeGLUT.

    IMPORTANT: Legacy X11 TriD is *not* supported!

    It is implemented in the imag2d.pdl file for autoloading
    via PDL::AutoLoader.  To use, copy the imag2d.pdl file
    to somewhere in your PDLLIB path or add the location to
    your PDLLIB environment variable.

    It works with multiple, simultaneous, image windows
    and appears to work side-by-side with TriD graphics
    windows.
    
    After you have imag2d.pdl in your @PDLLIB list,
    you can use 'help imag2d' to get usage instructions
    and documentation.
    
    This implements the basic functionality planned regarding
    an improved imagrgb() routine.

  * Many fixes for Debian package release

    This should allow PDL-2.4.6 to be more readily released
    as a Debian packages.  The general clean up involved
    improves PDL portability and robustness generally.

  * Several little bugs fixed since PDL-2.4.5

    The number of history lines when you use Term::ReadLine::Perl
    with perldl are now set correctly to $PERLDL::HISTFILESIZE.
    The default value is 500.

    A number of minor internal fixes for portability and
    implementation improvements:

     - Add comment re fix for defined(%hash) usage
     - Fix annoying PGPLOT::HANDLE warning message
     - Replace GIMME by GIMME_V in Core.xs
     - Update to v3.14 of ppport.h portability

    Fixed MINUIT build problem where non-standard code was
    being generated which caused problems with rigorous compiler
    settings.  This was SF bug #2524068.

  * Fixed a number of issues with PDL convolution routines

    conv1d() algorithm adjusted to match conv2D() and convolutionND().
    Documentation on the exact computation being performed in conv1d()
    was added.

    Fixes bug #2630369 with fftconvolve().  It now gives the same results
    as conv1d(), conv2d(),.., except perhaps with respect to the boundary
    condition handling.

  * Improved documentation and release notes and files

    Updated PDL::FAQ.

    Lots of little changes to bring documentation in line
    with current PDL functionality.  Volunteer editors and
    contributors always welcome!

  * Padre and enhanced perldl shell integration begun

    There is a new PDL-2.4.6/Padre/ subdirectory in the PDL
    source tree which contains work towards Padre integration
    and a 2nd generation, enhanced perldl shell for PDL.

    E.g. an *experimental* plug-in giving PDL::NiceSlice support
    to the Devel::REPL shell is included.  See the Padre/README
    file for instructions to get you started.



v2.4.5 2009-10-24 11:56:23-04:00

Highlights:

  * 3D graphics modules now run on win32 and Mac OS X
    systems without requiring X11 be installed.  The
    only prerequisites are OpenGL and FreeGLUT/GLUT.

  * Release documentation and FAQ have been updated
    to be more useful (and more accurate).

  * PDL build, test, and run time diagnostic messages
    have been make clearer and more helpful.

  * Many bugs have been fixed since PDL-2.4.4 so this
    is the most reliable PDL ever.

  * PDL now requires perl 5.6.2 or greater and has
    updated DEPENDENCIES information and code.  This
    should improve the buildability of PDL


General Notes:

  This is the first PDL release supporting the new build
  strategy for the PDL::Graphics::TriD modules.  The result
  is it now builds on more platforms than ever.  You'll
  need to install the OpenGL module and have FreeGLUT or
  GLUT (for Mac OS X) on your system.

  If you have problems with the new TriD build (that you
  did not have before), edit perldl.conf and set USE_POGL
  to 0.  That should enable you to build the legacy TriD
  code but you *will* want to submit a bug report, see the
  next point....

  IMPORTANT: Given the increased portability and generality
  of the new TriD interface approach, it is expected that
  the legacy TriD build interface (based on X11) will be
  deprecated soon (almost immediately) and removed after that.
  (N.B. It has been effectively unsupported for some time)

  If you are new to PDL, we recommend joining the perldl
  mailing list for discussion and questions.  See

    http://pdl.perl.org/?page=mailing-lists

  for how to sign up and links and searches of the list
  archive discussions.


Summary of Changes:
  
  New perldl.conf configuration parameters controlling
  build of TriD with perl OpenGL (a.k.a. POGL) with the
  follow default values:

    USE_POGL:
          1 -- build using POGL
          0 -- build using legacy build process
      undef -- build with POGL if possible

    POGL_VERSION:
       0.60 -- minimum required version of OpenGL

    POGL_WINDOW_TYPE:
     'glut' -- use a GLUT GUI for window creation
      'x11' -- use GLX and X11 for the GUI (this is a "compatibility
               mode" to support PDL::Graphics::TriD::Tk widgets)

  NOTE: Set WITH_3D => 0 in perldl.conf to disable the
  TriD build completely.  Just setting USE_POGL => 0 is
  not enough.
  
  The OpenGL tests in t/opengl.t now respects the interactive
  setting from the PDL_INT environment variable.

  Two TriD check programs, 3dtest.pl and line3d.pl, are added to the
  main PDL build directory.  They can be run as quick checks of the
  new functionality and are short enough run under the perl debugger
  if needed. e.g.

     perl -Mblib 3dtest.pl OR perl -Mblib line3d.pl


  OpenGL (a.k.a. GL) is the default TriD output device on all
  platforms.  VRML does not work at the moment.  GLpic is not
  tested but may work.

  Closed SF bug #1476324 by adding FAQ entry on clean installs

  Fix qsorti(null()) crash bug from SF bug #2110074.  Make
  qsorti() return quietly when given a null() ndarray input

  Fix broken PP typemap finding code, thanks to CS for the
  final code and many testers!
  
  Fix t/autoload.t tilde expansion bugs and test failures.
  tilde expansion seems to work consistently with bash now

  Partial fix implemented for PDL::IO::Browser.  The code has
  only been tested with cygwin but it should work on systems
  with ncurses in the "right place".  This is **not tested**
  but set WITH_IO_BROWSER => 1 if you wish to try.

  If the perldl shell is unable to load PDL for some reason
  and defaults to basic perl support, the prompt now changes
  to perl> reflecting that fact.

  readflex() now works with File::LinearRaid.

  Many win32 fixes to tests and build process which make
  things work more smoothly on win32 platforms.

  See the Changes file or run 'git log --stat' for the detailed
  list of changes.
  


v2.4.4 2008-11-12 19:16:53-10:00

General Notes:

     - Bad value support is now enabled by default for
       PDL builds.  This feature allows simpler handling
       of missing or invalid data during processing.

       For example, missing pixels could be interpolated
       across.  Calculations could be skipped for
       missing data points...
       
       Edit the perldl.conf file to turn off bad value
       support before compiling if needed.

     - This release includes significant improvments
       in portability, enhancements in functionality,
       and *many* bugs fixed.

     - PDL::Graphics::TriD modules for 3-D and image
       visualization are being refactored for improved
       portability and performance.  Preliminary hooks
       are in PDL-2.4.4 to support the new functionality.
       
       Announcements to the perldl mailing list will be
       made when the PDL::Graphics::OpenGL::Perl and
       Term::ReadLine::FreeGLUT suport is on CPAN.

     - Builds out-of-the-box on cygwin and win32
     
     - perl 5.6.x is explicitly required to configure and
       will go away in future versions.  5.8.x and above
       are the recommended versions


Summary of Changes:

     - Improve uuencode support in Dumper for additional OSes
       such as *BSD varieties that may need additional options
       to prevent stripping of the leading slash in pathnames
       including: darwin, netbsd, openbsd, freebsd, and dragonfly.
      
     - Updated more PDL tests to use the recommended Test::More
      
     - Updated PDL::Graphics::PLplot build support for more 5.9.0
       specific features
      
     - AutoLoader ~ expansion has been updated to conform more
       closely to the ~ expansion in the bash shell
      
     - Better checks for a valid PROJ4 build environment are now
       performed before attempting to compile PDL modules using it
      
     - PDL now builds and runs on perl-5.10.x
      
     - The perldl shell has added support for using FreeGLUT for
       display in analogy with the existing Tk event loop support.
       This enables refactoring of the TriD modules to use the
       Perl OpenGL module (a.k.a. POGL) instead of the internal,
       and deprecated, PDL::Graphics::OpenGL et. al.
      
     - The perldl acquire/filter/execute loop is now $_-safe by
       using $lines instead of $_ for all the central modifications.
       Avoids problems with some AUTOLOAD functions that leaked $_.
      
     - Removed ExtUtils::F77 from the required prerequisites for
       PDL to improve the buildability on platforms without an
       available fortran compiler.  If you have a fortran compiler
       and EU::F77 installed, PDL::Slatec will be built.
      
     - zeros function added as an alias for the zeroes function
         
     - Many warning messages that were not actually problems have
       been quieted, especially many pointer to int conversion messages
      
     - Added $PERLDL::HISTFILESIZE to allow configuration of the number
       of lines of history to be saved by the interactive PDL shell.
      
     - Fixed implementation of the pctover() function to address bug
       #2019651 on sf.net.  Added explicit documentation in the code
       on the algorithm being used.
      
     - Various updates to the PDL FAQ
      
     - Implemented a PDL interface to the Minuit minimization library
       from CERN
      
     - Removed circular dependency in PDL Makefile.PL Makefile generation
       process which caused builds with some versions of make to fail
      
     - Multiple fixes to enhance configuration and build for win32
     
     - Added basic table-inversion to t_lookup for PDL::Transform
      
     - Fixed problem in uniqvec() where it failed to generate a correct
       result if all the input vectors were the same, fixed bug #1869760
      
     - Add improved 16-bit image support for IO with rpic() and wpic()
       provided you have a recent version of the NetPBM library that
       supports 16-bit images
      
     - Enabled building of GSL on Win32.
    


v2.4.3 2006-08-20 06:07:30-10:00

General Notes:

     - again, mainly a bugfix and polishing release.

     - builds out-of-the-box on cygwin and win32 build environment
       has been significantly improved
     
     - perl 5.6.x is now deprecated; 5.8.x is recommended.  Support
       for 5.6.x may go away in future versions.  


Summary of Changes:

     - PDL now builds under cygwin on windows PC including
       TriD(OpenGL) 3D graphics and PGPLOT and PLplot 2D graphics
       support. See PDL/cygwin/ and files README and INSTALL for
       details and how to build/install external dependencies.
     
     - The win32 build has been improved.  See PDL/win32/INSTALL
       for details.
     
     - Many fixes from the Debian build patches have been
       incorporated.  See PDL/debian for specifics.
     
     - 64bit platform build has been improved.
     
     - New functionality, functions and modules:
         
         * Bad value support has been extended to per-PDL bad
           values as an experimental feature. To use, configure
           WITH_BADVAL => 1 and BADVAL_PER_PDL => 1 in perldl.conf
           before building.

         * PDL::GSL::INTEG now supports the calculation of
           nested integrals

         * New function tcircle (threaded circle) added to 
           PDL::Graphics::PGPLOT This draws multiple circles in
           one go (see also tpoints and tline)

         * Added set operation routines for pdls treated as sets
           (help setops).

         * PDL::IO::GD module interface to the GD runtime image
           libaray (http://www.boutell.com/gd/) has been integrated.

         * The PDL::GIS::Proj and PDL::Transform::Proj4 modules
           to interface to the PROJ4 Cartographic Projections
           Library (http://proj.maptools.org/) have been added.

         * PDL::IO::HDF provides an interface to the HDF4
           library (http://hdf.ncsa.uiuc.edu/).
     
     
     - The PDL test suite (i.e. tests in in PDL/t) has been
       enhanced. Coverage has improved and output diagnostic
       messages are more useful. Test::More is becoming the
       preferred test module. The vanilla Test and Test::Simple
       may be deprecated in the future.

     - PDL core code has been fixed to address valgrind-detected
       errors and to enable better bad value support including the
       new experimental per-PDL bad values. These changes will
       require a re-build/install of any external modules using
       the C interface of PDL. See perldl.conf to configure the
       new bad value support.

     - Several TriD graphics build problems have been resolved.
       The TriD rotation bug has been fixed.

     - Many other bug fixes too numerous to mention. See the
       PDL/Changes file for details.

     - Multiple fixes and additions to PDL documentation as well
       as the PDL::FAQ.



v2.4.2 2004-12-28 09:19:30-10:00

General Notes:

     - again, mainly a bugfix and polishing release.
     
     - perl 5.6.x is now deprecated; 5.8.x is recommended.  Support
       for 5.6.x may go away in future versions.  

     - a little too late for Christmas; but happy new year 2005!


Summary of Changes:

 - Overhaul of FITS I/O.  FITS binary tables are now supported,
   for both reading and writing.

 - Many improvements to PLplot handling

 - New Graphics::Limits package determines display range for multiple 
   concurrent data sets

 - Better PDL::reduce function

 - Improvements to PDL::Transform

 - pdl() constructor is more permissive -- you can feed it PDLs and 
  it does the Right Thing most of the time.

 - Cleaner handling of config files

 - Improvements to multi-line parsing in the perldl shell

 - New 'pdl' command-line entry to perldl shell allows #!-style
   scripting (so you can re-use your journal files verbatim)

 - Several fixes for Microsoft Windows operation

 - PDL::undefval works properly, also has warning tripwires

 - statsover finally seems to produce meaningful, consistent RMS values

 - Several 64-bit compatibility issues (this work is probably not yet
  complete).

- Many small bug-fixes too numerous to list (see the Changes file).




v2.4.1 2004-01-05 12:27:18-10:00

General Notes:

     - mainly a bugfix and polishing release


Summary of Changes:

     - Fixed warnings with perl 5.8.2

     - Replace original m51.fits with freely distributable image

     - Upgrade PLplot interface for plplot-5.2.1 and perl 5.8.2

     - Improvement to documentation of autoloaded routines

     - Added more universal `whatis' function to perldl

     - Numerous small fixes/additions to docs/functions

     - Improved handling of empty ndarrays

     - Fixed most reported bugs


v2.4.0 2003-05-22 12:09:26-10:00

General Notes:

     - Perl 5.6.0 or later is now required, along with the modules
       Filter and Text::Balanced.

     - After installing PDL 2.4.0 external PDL modules will need to re-built.
       (any such modules will refuse to load until they have been re-built)
       
     - New demos of the PDL::Transform and PDL::Transform::Cartography
        modules have been added to perldl.
       Type 'demo transform' or 'demo cartography' in the perldl shell. 
        ( Note that PGPLOT is required to run )

Summary of Changes:

     - The NiceSlice syntax comes of age
       (Nice slicing has been around a while, but really needs to be 
        acknowledged as the main way of slicing PDLs...)

     - New GSL functionality: greatly improved access to the Gnu Scientific
       Library, including interpolation, finite-difference, random
       variable, and other routines.

     - New, very powerful indexing and slicing operators allow boundary 
          conditions   (range, indexND)

     - N-dimensional indexing (indexND) and selection (whichND) methods

     - Powerful syntax for coordinate transformation and arbitrary image
       resampling and coordinate transformations -- including high powered
       spatially-variable filtering (PDL::Transform module)

     - Support for major cartographic transformations
       (PDL::Transform::Cartography module)

     - New PLPlot graphics interface ( cleaner and faster than PGPLOT )

     - Many improvements to the PGPlot interface:
       * Strong FITS support (easy display of images, vectors, & contours in
            science coordinates)
       * Better vector graphic support [including improvements to line() and
         a new routine, lines()]
       * Much cleanup of errors and bugs
       * Spinlocks prevent interrupt-related PGPLOT crashes (requires Perl 5.8)
       * RGB output to truecolor devices (requires PGPLOT-5.3devel)

     - Improvements to the perldl shell:
       * Many bug fixes
       * Multi-line inputs to the perldl shell for easier cut-n-paste
       * ^D blocking on demand (controlled by perl variable or command-line 
          switch)
       * Autoloading detects error conditions on compile
       * New demos

    - Header copying is now explicit rather than by reference -- so that,
      e.g., FITS file manipulation is more intuitive and natural.

    - Improved support for Astro::FITS::Header

    - Bad value support is improved

    - Several new utility routines, including glue(), zcheck(), and ndcoords().

    - Better matrix operation support: matrix operations are now in 
        PDL::MatrixOps, and are all threadable.  Singular value decomposition,
        determinant, linear equation solving, matrix inversion, 
        eigenvalue decomposition, and LU-decomposition.

v2.3.4 2002-09-23 15:50:06-10:00

     - Now should compile using perl 5.8.0
     - Improved speed for generating PDL's from a perl array ref
     - Added PDL::IO::Storable, which enables PDL storage/retrieval
       using the Storable package.
     - Added  PDL::GSL::SF (Gnu Scientific Library, Special Functions) hierarchy
     - New % operator follows (mathematically correct) perl % operator behavior
     - Numerous Bug Fixes
        
  See the Changes file for a detailed list of changes.

v2.3.3 2002-05-22 03:16:29-10:00
  
  Mainly a bugfix release with some nice little additions:
     - PDL::IO::Dumper: Cleanly save and restore complex
        data structures including PDLs.  
     - Support for the new Astro::FITS::Header module
       (availiable on CPAN).
        
  See the Changes file for a detailed list of changes.

v2.3.2 2001-12-18 22:20:31-10:00

  - A pure bugfix release to fix compilation problems with gimp-perl
    (part of the gimp distribution). The following notes from
    2.3 and 2.3.1 still apply:

v2.3.1 2001-11-21 14:38:32-10:00

  - A bugfix release to fix some compilation problems seen with
    2.3. The following notes from 2.3 still apply:

v2.3 2001-11-16 05:12:41-10:00
 
 Summary of Changes
   - A nicer slicing syntax for PDL added via the new 
     PDL::NiceSlice module.
   - Inline::Pdlpp module added, which enables in-line
     PDL::PP definitions. (i.e. no Makefiles, building
      hassles for creating PP code)
   - A Multitude of bug fixes, doc updates, and other
     changes.
     
  Note:Support for perl version 5.005 and previous is 
  limited in this release. Perl 5.6.0 or greater is
  recommended for full PDL functionality.
        
  See the Changes file for a detailed list of changes.
  
v2.2.1 2001-04-25 03:05:46-10:00
 
 Summary of Changes
    Bugs Fixed:
          - 'pow' function fixed in math.pd
          - Misc memory leaks fixed.
          - PGPLOT 'undefined window size' 
             bug fixed.
          - Test failures with opengl.t fixed.
          - Error in output of 'minimum_n_ind' function
            fixed.
            
    Misc Changes:
        - Documentation updates.
        - Updates to work with perl5.6.1
        
  See the Changes file for a detailed list of changes.
  
v2.2 2000-12-21 03:25:36-10:00

Major Changes:

  - 'Bad' Value Support added. With this option compiled-in, certain
     values in a PDL can be designated as 'Bad' (i.e. missing, empty, 
     etc). With this designation, most PDL functions will properly 
     ignore the 'Bad' values. See PDL::BadValues for details.
     
  - PGPLOT interface rewritten. New Features:
      - Interactive cursors (cursor)
      - Text on plots       (text)
      - Legends             (legend)
      - Circles, Rectangles, Ellipses
      - Multiple plot windows, one can jump from panel to panel when
        the window is divided in several.
      - More control over options - see PDL::Graphics::PGPLOTOptions for
        details.
      - New Examples in Example/PGPLOT.

   - Major updates to the Tri-D Code. Now requires perl 5.6 for TriD.
    
   - 'Reduce' function added. This provides a consistent interface to the
     projection routines (sumover, average, etc). See PDL::Reduce.
     
   - Improved OpenGL detection during 'perl Makefile.PL

   - pdldoc command added. This allows you to look up PDL 
     documentation similar to the perldoc command. 
     
   - Perl 5.6 is now recommended for PDL 2.2. It will still work 
     with perl 5.005, but some of the extra libs won't be compiled
     ( like Graphics/TriD).
  
Many other changes. See the Changes file for a detailed list of changes.

v2.1 2000-06-07 22:23:47+00:00

Major Changes:
  - Speed Increase. Most PDL functions are now done totally
    in C-code, without any perl wrapper functions as was done
    with previous versions. The speedup will be most noticeable
    for operations on many small PDL arrays.
  - Mem Leaks Fixed.
  - Added a consistent, Object-Oriented interface to the 
    various interpolate functions in PDL. (PDL::Func, 
    See Lib/Func.pm).
    
See the Changes file for a detailed list of changes.



v2.005 2000-04-05 22:30:35+00:00

Major Changes:
   - A bugfix release to fix 2.004 problems with PGPLOT changes
     and perl 5.6.0.
   - The following notes from 2.004 still apply:
     - *IMPORTANT NOTE*: Due to changes to the PGPLOT module, 'use
       PDL::Graphics::PGPLOT' has been removed from PDL.pm (i.e. in scripts
       and within perldl you now need to explicitly say 'use
       PDL::Graphics::PGPLOT'). Additionally, it needs Karl's new 2.16
       release of the PGPLOT module (available from CPAN).
     - Notable additions are a module for operations on complex ndarrays
       (PDL::Complex), a subtype of PDL which allows manipulation of byte
       type PDLs as N dimensional arrays of fixed length strings (PDL::Char)
       and a Levenberg-Marquardt fitting module (PDL::Fit::LM).
   - Bug reports and patches to the relevant places on sourceforge, please.

