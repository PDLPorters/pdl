The following issues have been reported with this version of PDL:


- Some systems have reported build failures that appear to be
  a result of missing pthread_getspecific in library calls.

  If you see this, please report via the perldl mailing list to
  help us determine the origin of the probem and fix it.
  A workaround is to set WITH_POSIX_THREADS => 0, by editing
  the perldl.conf file.


- Multiple subtest failures in t/gd_oo_tests.t have been
  seen in CPAN Testers reports, they appear to be on 64bit
  BSD operating systems compiled for AMD processors.  Sf.net
  bug #3518190 "t/gd_oo_tests.t fails for AMD64" tracks this
  issue.


- A change in perl-5.14 on how the 'x' operator works affects
  PDL's overload of that operator for matrix multiplication.
  An example that shows the problem is code like:

     f( ($pdl0 * $pdl1) x $pdl2 )

  which gives an error.  The fix is to force the element-wise
  operation in parentheses to be treated in scalar context
  rather than list context.  E.g.,

    f( scalar($p0 * $p1) x $p2 );

  Please see
  http://mailman.jach.hawaii.edu/pipermail//pdl-porters/2012-February/004426.html
  for a more detailed discussion and additional work-arounds.


- On MS Windows, perl 5.14 (and perhaps later), it is reported that
  PDL::Graphics::PLplot cannot be sucessfully built as part of the
  PDL build. It compiles ok, but the resultant binary files are
  unusable. Workaround is to build PDL first, then build
  PDL::Graphics::PLplot separately.


- For perl 5.14.0 and later, the perldl shell fails to print
  tracebacks from barf called from subordinate evals.  This
  is because of changes in exception handling for $@ and the
  associated XS parameters G_EVAL and G_KEEPERR.  Please see
  http://search.cpan.org/~jesse/perl-5.14.0/pod/perldelta.pod
  for details.


- Some versions of MinGW gcc (used to compile for win32 perls)
  crash in compilation of large, PP-generated files.  The work-
  around is to disable optimization for those file.  See the
  INSTALL file for a hand fix.


- The current Ctrl-C logic in the PDL shells (pdl2 and perldl)
  doesn't work the same with the perl's new "safe signals".  A
  workaround to the problem is to set the PERL_SIGNALS environment
  variable to "unsafe".  See sf.net feature request #3308168
  for details and any future status.


- The Perl debugger for perls 5.10.1 through 5.14.x has a new
  "feature" leading to false fails for lvalue subroutines when
  run under the debugger.  If you need to debug such code with
  an affected perl version, the work around is to use an
  intermediate temporary variable assignment as in:

    $piddle->slice('0:10') .= 100;           # original slice code
    ($tmp = $piddle->slice('0:10')) .= 100;  # work around perl -d "feature"

  The problem is understood and it appears that the error has
  been replaced by a warning with perl-5.15.1 and is fixed in
  perl-5.16.0.  NOTE: the work-around is ugly but effective.


- Multiline q'' constructs are broken in the Devel::REPL versions
  1.003012 and 1.003013 so you'll need to use perldl or avoid
  splitting quoted strings across lines.  A fix is being investigated.


- The demo 3d and 3d2 windows do not close (can not be closed)
  after the demo finishes.  You need to exit the perldl shell
  to have the window close.


- When you close a TriD graphics window with the frame widget
  the whole process exits including the perldl shell.


- PDL::FFTW is based on version 2 of the FFTW API.  The current
  release of the FFTW library is version 3.2.2.  To use PDL::FFTW
  you will need to install FFTW version 2.1.5, use the built-in
  PDL::FFT routines instead, or (better yet) submit a patch to
  update PDL::FFTW to the version 3 API.


- Extremely verbose but not particularly helpful text output from
  the configure-build-test process.


- Directory completion in the interactive PDL shells (perldl and pdl2)
  using Term::ReadLine::Perl adds a space after each directory expansion.
  To continue to complete, one must delete the space before typing <TAB>
  again.  The problem has been reported as a Term::ReadLine::Perl bug.


- PDL on Cygwin has (by default) a 300MB process memory limit which can
  cause out of memory crashes with large data sets.  See the cygwin users
  guide: http://www.cygwin.com/cygwin-ug-net/setup-maxmem.html for how
  to increase the memory limit.


- minimum/maximum/min/max inconsistently handle NaN values.
  NaNs for the first element of a pdl will propagate to the
  result while if the first element is a number, then the
  result will be a number.  The answer for max/min should not
  depend on the order of the input values.


- 16-bit image IO via rpic/wpic and rim/wim do not correctly
  handle byte order issues.  The intermediate PNM data piped
  through the converter programs is not adjusted to network
  byte order per the NetPBM convention/standard.  This is not
  an issue for big-endian systems or for 8-bit/channel image
  data.


- The following SourceForge bugs are outstanding at time of the
  PDL-2.4.11_001 release:

  3544682    perldl doesn't print stacktrace from barf
  3543056    propagate badflag with .=
  3539685    pdldoc can't handle SPP mount location change
  3535203    polyfill/polyfillv includes boundary pixels
  3528231    t/slatec.t subtest 8 fails w/ BADVAL_USENAN=1
  3518190    t/gd_oo_tests.t fails for AMD64
  3515759    PDL::GIS::Proj doesn't buidl with proj-4.8.0
  3509400    pp_def, pp_line_numbers,..not found by pdldoc
  3503566    pdl2 enters infinite loop on DWIMPerl
  3475075    t/pic_16bit.t subtest fails
  3316394    'help funname' fails to show multiple function names
  3314708    PDL install does not install scantree.pl
  3299615    PLplot still unusable with X
  3234141    max() fails on nan
  3161459    online docs don't link to functions in other PDL modules
  3018731    NiceSlice affects code where it should not
  2995500    perl -d chokes on lvalue functions
  2153898    default PDL build output too long
  1507054    closing TriD window kills perldl shell
  1205359    PGPLOT Window does not store full state info


For more information on these and other PDL issues, and for
submissions of patches (bug patches are always welcome!),
see the PDL mailing lists. Links to archive list discussions
and how to register for the mailing lists can be found at
http://pdl.sourceforge.net/maillists/ .
