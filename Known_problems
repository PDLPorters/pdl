The following issues have been reported with this version of PDL:

- A bug in Netpbm from versions 10.56.00 through 10.61.2 may
  result in a an invalid conversion of RAST images to PNM
  format on some platforms, resulting in a failed picrgb test.

  
- Bugs in Netpbm versions earlier than 10.58.00 result in
  invalid 16bit PNG image IO and failing tests.


- GLUT readline support in perldl with the -glut option not
  yet implemented for win32.  Work in progress.


- A change in perl-5.14 on how the 'x' operator works affects
  PDL's overload of that operator for matrix multiplication.
  This can affect code using parentheses to group.  An example
  that shows the problem is code like:

     f( ($pdl0 * $pdl1) x $pdl2 )

  which now gives an error.  The fix is to force the element-wise
  operation in parentheses to be treated in scalar context rather
  than list context.  E.g.,

    f( scalar($p0 * $p1) x $p2 );

  Please see
  http://mailman.jach.hawaii.edu/pipermail//pdl-porters/2012-February/004423.html
  for a more detailed discussion and additional work-arounds.


- On MS Windows, perl 5.14 (and perhaps later), it is reported that
  PDL::Graphics::PLplot cannot be sucessfully built as part of the
  PDL build. It compiles ok, but the resultant binary files are
  unusable. Workaround is to build PDL first, then build
  PDL::Graphics::PLplot separately.


- Some versions of MinGW gcc (used to compile for win32 perls)
  crash in compilation of large, PP-generated files.  The work-
  around is to disable optimization for those files.  See the
  INSTALL file for a hand fix.


- The current Ctrl-C logic in the PDL shells (pdl2 and perldl)
  doesn't work the same with the perl's new "safe signals".  A
  workaround to the problem is to set the PERL_SIGNALS environment
  variable to "unsafe".  See sf.net feature request #3308168
  for details and any future status.


- The Perl debugger for perls 5.10.1 through 5.14.x has a new
  "feature" leading to false fails for lvalue subroutines when
  run under the debugger.  If you need to debug such code with
  an affected perl version, the work around is to use an
  intermediate temporary variable assignment as in:

    $piddle->slice('0:10') .= 100;           # original slice code
    ($tmp = $piddle->slice('0:10')) .= 100;  # work around perl -d "feature"

  The problem is understood and it appears that the error has
  been replaced by a warning with perl-5.15.1 and is fixed in
  perl-5.16.0.  NOTE: the work-around is ugly but effective.


- Multiline q'' constructs are broken in the Devel::REPL versions
  1.003012 and 1.003013 so you'll need to use perldl or avoid
  splitting quoted strings across lines.  A fix is being investigated.


- The demo 3d and 3d2 windows do not close (can not be closed)
  after the demo finishes.  You need to exit the perldl shell
  to have the window close.


- When you close a TriD graphics window with the frame widget
  the whole process exits including the perldl shell.


- Extremely verbose but not particularly helpful text output from
  the configure-build-test process.


- Directory completion in the interactive PDL shells (perldl and pdl2)
  using Term::ReadLine::Perl adds a space after each directory expansion.
  To continue to complete, one must delete the space before typing <TAB>
  again.  The problem has been reported as a Term::ReadLine::Perl bug.


- minimum/maximum/min/max inconsistently handle NaN values.
  NaNs for the first element of a pdl will propagate to the
  result while if the first element is a number, then the
  result will be a number.  The answer for max/min should not
  depend on the order of the input values.


- The following SourceForge bugs are outstanding at time of the
  PDL-2.007_14 release:

  377   PDL::Transform::Proj4 not building under latest dev EUMM
  376   PDL Segmentation fault working with Storable restored PDL

        Test code fails to use PDL::IO::Storable which
	results in the crash.  This does not seem to be
	an actual bug.  Waiting to hear back from user.

  375   Storable files incorrectly processed from older versions.

        The PDL git has substantial fixes for portability and
	robustness for PDL::IO::Storable going forward.  Older
	PDL releases are not robust/portable.

  366    many warnings in t/transform.t with use strict; use warnings;
  364    type promotion in whistogram is based upon the index, not the weight
  354    filter demo list by actually available
  347    t/#pdl_from_string.t has a failure if BADVAL_NAN=1
  346    ExtUtils::F77 dependency causing problems for CPAN install
  343    longlong constructor and display lose digits due to implicit double precision conversions
  340    orover of byte data returns long type
  339    PDL::Complex support is inconsistent and incomplete
  334    Test coverage is incomplete
  330    NiceSlice can get confused by comments to cause compilation errors
  324    PDL re-install wipes out non-core docs
  322    PDL::Demos system needs overhaul
  308    propagate badflag with .=
  274    'help funname' fails to show multiple function names
  254    online docs don't link to functions in other PDL modules
  238    NiceSlice affects code where it should not
  210    default PDL build output too long
  147    closing TriD window kills perldl shell


For more information on these and other PDL issues, and for
submissions of patches (bug patches are always welcome!),
see the PDL mailing lists. Links to archive list discussions
and how to register for the mailing lists can be found at
http://pdl.perl.org/?page=mailing-lists .
