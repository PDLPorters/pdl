# -*-perl-*-
 
# PDL Configuration options

# You can edit this here or say 'perl Makefile.PL PDLCONF=file'
# or use ~/.perldl.conf

# Note in general "0" means False, "1" means "True" and "undef"
# means "Try if possible (e.g. because the library is found)"
#
# You can also use a string that matches /^y/i to mean True or
# one that matches /^n/i to mean False.  It will be automatically
# converted to 1 or 0 before being loaded into the Config.pm module.
#

%PDL_CONFIG = (
#
# Do we generate HTML documentation?  This is normally a good idea,
# as it's nice to browse -- but many folks don't use it, preferring
# the man page and/or help versions of the documentation.  Undef or 1
# causes the HTML documentation to be built; 0 turns it off.
#
        HTML_DOCS => 1,

# Location of directory for temporary files created during the
# build/test process. See the getpdl_config() routine in Makefile.PL
# for the choice made if TEMPDIR is left as 'undef': it boils down to
# the first value that is defined from
#    $TEMP, $TMP, or "/tmp" [a TEMP directory for MSWin users]
#

        TEMPDIR => undef,

# Decides if the output of attempts to link various function
# during 'perl Makefile.PL' will be hidden when building PDL
# should only be set to 0 for debugging purposes
# see also L<trylink|PDL::Core::Dev/trylink>

        HIDE_TRYLINK => 1,

# you can set machine specific optimizations here
# the settings will be passed to the toplevel Makefile.PL
# which *should* pass it to any recursively invoked ones

        OPTIMIZE => undef, # '-g',

# Use posix threading to make use of multiprocessor machines
# undef -> try if possible
# 0 -> don't use
# true -> force use

        WITH_POSIX_THREADS => undef,    

        MALLOCDBG => undef,
# {
#                       include => '-I/home/csoelle/tmp',
#                       libs => '-L/home/csoelle/tmp -lmymalloc',
#                       define => << 'EOD',
##define malloc(n) dbgmalloc(n,__FILE__,__LINE__)
##define free(p) dbgfree(p)
#EOD
#                       include => '',
#                       libs => '-lefence',
#                       define => '',
#                     },

# Do we want routines to handle bad values?
#   saying no will make PDL a bit faster
# true  -> yes
# false -> no, undef -> no
#
#       WITH_BADVAL => 0,
        WITH_BADVAL => 1,

# if WITH_BADVAL == 1, do we use NaN/Inf to represent badvalues
# (not convinced setting this results in faster code)
#
        BADVAL_USENAN => 0,
#       BADVAL_USENAN => 1,

# The original BADVAL implementation assigned bad-values on pdl-types,
# not per pdl, setting the following to one will make it a pdl-variable
# THIS IS AN EXPERIMENTAL FEATURE -- BEWARE...

        BADVAL_PER_PDL => 0,
#       BADVAL_PER_PDL => 1,

# Try to build Graphics/TriD
#
# true -> force build of PDL::Graphics:::TriD
# false -> skip build of PDL::Graphics:::TriD
# undef -> let PDL build decide based on dependencies present
#
        WITH_3D => undef,

# Build Graphics/TriD using Perl OpenGL
#
# true -> use new Perl OpenGL bindings
# false -> use legacy, deprecated X11 only bindings
# undef -> let PDL build decide (check if Perl OpenGL is present)
#
        USE_POGL => undef,
#       USE_POGL => 0,
#
        POGL_VERSION => 0.63,           # minimum compatible OpenGL version

#       POGL_WINDOW_TYPE => 'x11',      # use X11+GLX for windows
        POGL_WINDOW_TYPE => 'glut',     # use GLUT for windows

#------------------------------------------------------------------------#
#  --- NOT USED --- NOT USED --- NOT USED --- NOT USED --- NOT USED ---  #
#                                                                        #
# For Mesa 3.2                                                           #
#       OPENGL_LIBS => '-L/usr/local/Mesa/lib -lGL -lGLU -lXext -lX11',  #
#                                                                        #
# Mesa needs -DGL_GLEXT_LEGACY for glPolygonOffsetEXT among others       #
#       OPENGL_DEFINE => '-DGL_GLEXT_LEGACY',                            #
#       OPENGL_INC => '-I/usr/include/GL/',                              #
#                                                                        #
# For SGI GL                                                             #
#       OPENGL_LIBS => '-lGL -lGLU -lXext -lX11',                        #
#       OPENGL_INC => '',                                                #
#       OPENGL_DEFINE => '',                                             #
#                                                                        #
# Let perl try to figure it out                                          #
#       OPENGL_LIBS => undef,                                            #
#       OPENGL_INC => undef,                                             #
#       OPENGL_DEFINE => undef,                                          #
#                                                                        #
#  --- NOT USED --- NOT USED --- NOT USED --- NOT USED --- NOT USED ---  #
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
#  --- NOT USED --- NOT USED --- NOT USED --- NOT USED --- NOT USED ---  #
#                                                                        #
# The Karma interface has been REMOVED from PDL as of version 2.4.8.     #
# This is left as a comment for another release or so in case someone    #
# looks...                                                               #
#                                                                        #
# Whether or not to build the Karma interface module                     #
#                                                                        #
#       WITH_KARMA => 0,       # Karma interface has been REMOVED        #
#       WHERE_KARMA => undef,                                            #
#                                                                        #
#  --- NOT USED --- NOT USED --- NOT USED --- NOT USED --- NOT USED ---  #
#------------------------------------------------------------------------#

## Whether or not to build the PLplot interface module
#
# default settings (let PDL build decide whether to build PLPLOT)
#
        WITH_PLPLOT          => undef, # Leave it up to PDL to decide
        WHERE_PLPLOT_LIBS    => undef, # let PDL search for plplot installation
        WHERE_PLPLOT_INCLUDE => undef, # let PDL search for plplot installation
        
# Example manual settings:
#    WITH_PLPLOT          => 1,                        # Build PLPLOT interface
#    WHERE_PLPLOT_LIBS    => '/usr/local/plplot/lib',     # PLplot lib dir
#    WHERE_PLPLOT_INCLUDE => '/usr/local/plplot/include', # PLplot include dir

        
# Whether or not to build the PDL::Slatec module
# false -> don't use
# true -> force use

        WITH_SLATEC => undef,  # Leave it up to PDL to decide
        
# Whether or not to build the PDL::Minuit module
# false -> don't use
# true -> force use

       WITH_MINUIT => undef,   # Leave it up to PDL to decide

# If MINUIT_LIB is undef a standalone version of Minuit will be compiled 
# and PDL::Minuit will link to this library (fortran code can be found 
# at Lib/Minuit/minuitlib)
# If you want to try to link directly to the Minuit present 
# in the CERN library libpacklib.a, include the full path to the library
# here, e.g.,  MINUIT_LIB => '/usr/local/lib/libpacklib.a',

       MINUIT_LIB => undef, 

# Whether or not to build the PDL::GSL module
# false -> don't use
# true -> force use

        WITH_GSL => undef,     # Leave it up to PDL to decide
        
# Link flags for the GSL libs, e.g. '-L/usr/local/lib -lgsl -lm'
        GSL_LIBS => undef, # use gsl-config

# Location to find GSL includes:
        GSL_INC => undef, # use gsl-config

# Whether or not to build the PDL::FFTW module
# false -> don't use
# true -> force use

        WITH_FFTW => undef,    # Leave it up to PDL to decide
        
# Location to search for the FFTW libs
        FFTW_LIBS => [ '/lib','/usr/lib','/usr/local/lib'],

# Location to find FFTW includes:
        FFTW_INC => ['/usr/include/','/usr/local/include'],

# FFTW Numeric Precision Type to link in: (double or single precision)
        FFTW_TYPE => 'double',

# Whether or not to build the PDL::IO::HDF module
# false -> don't use
# true -> force use

        WITH_HDF => undef,     # Leave it up to PDL to decide
        HDF_LIBS => undef,
        HDF_INC => ['/usr/include/hdf'],

# Whether or not to build the PDL::IO::GD module
# false -> don't use
# true -> force use

        WITH_GD => undef,      # Leave it up to PDL to decide
        GD_LIBS => undef,
        GD_INC => undef,

# Whether or not to build the PDL::GIS::Proj module
# false -> don't use
# true -> force use
#
        WITH_PROJ => undef,    # Leave it up to PDL to decide
        PROJ_LIBS => undef,
        PROJ_INC => undef,

# N.B. These are array ref values and *not* strings
#
#       PROJ_LIBS => [ 'C:/_32/msys/1.0/local/lib'],
#       PROJ_INC => [ 'C:/_32/msys/1.0/local/include'], 
        
# Do we build PDL::IO::Browser?
# default -> do not build (module needs to be updated)
#
        WITH_IO_BROWSER => 0,

# Quiet Astro::FITS::Header warnings for PDL build process by default
# Eventually would be better to set undef by default, and have the
# Makefile.PL change the value after it has been found missing once.
# TBD after PDL 2.4.3 release...
#
        FITS_LEGACY => 1,

# Whether or not to enable the new Devel::REPL based PDL shell
# Given the large numbers of dependencies for Devel::REPL, we
# don't want to have that as a required dependency for PDL.
# Still, if it is there already, we could use it...
#
# false -> don't install pdl2 support
# true -> force pdl2 install (default)

        WITH_DEVEL_REPL => 1,

# Set this for official CPAN releases of PDL since these
# tests will always fail until they are fixed.  It can also
# be set from the value of the environment variable of the
# same name.
#
        SKIP_KNOWN_PROBLEMS => 0,
);

1; # Return OK status on 'require'
