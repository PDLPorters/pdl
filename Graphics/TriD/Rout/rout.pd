use strict;
use warnings;

pp_addpm({At=>'Top'},<<'EOD');
use strict;
use warnings;

=head1 NAME

PDL::Graphics::TriD::Rout - Helper routines for Three-dimensional graphics

=head1 DESCRIPTION

This module is for miscellaneous PP-defined utility routines for
the PDL::Graphics::TriD module. Currently, there are

EOD

pp_def(
	'combcoords',
	GenericTypes => ['F','D'],
	DefaultFlow => 1,
	Pars => 'x(); y(); z();
		float [o]coords(tri=3);',
	Code => '
		$coords(tri => 0) = $x();
		$coords(tri => 1) = $y();
		$coords(tri => 2) = $z();
	',
	Doc => <<EOT
=for ref

Combine three coordinates into a single ndarray.

Combine x, y and z to a single ndarray the first dimension
of which is 3. This routine does dataflow automatically.
EOT

);

# checks all neighbouring boxes.
# Returns (r = |dist|+d) a*r^-2 + b*r^-1 + c*r^-0.5
pp_def(
	'repulse',
	GenericTypes => ['F','D'],
	Pars => 'coords(nc,np);
		 [o]vecs(nc,np);
		 int [t]links(np);',
	OtherPars => '
		double boxsize;
		int dmult;
		double a;
		double b;
		double c;
		double d;
	',
	Code => '
		double a = $COMP(a);
		double b = $COMP(b);
		double c = $COMP(c);
		double d = $COMP(d);
		int ind; int x,y,z;
		HV *hv = newHV();
		double boxsize = $COMP(boxsize);
		int dmult = $COMP(dmult);
		loop(np) %{
			int index = 0;
			$links() = -1;
			loop(nc) %{
				$vecs() = 0;
				index *= dmult;
				index += (int)($coords()/boxsize);
			%}
			/* Repulse old (shame to use x,y,z...) */
			for(x=-1; x<=1; x++) {
			for(y=-1; y<=1; y++) {
			for(z=-1; z<=1; z++) {
				int ni = index + x + dmult * y +
					dmult * dmult * z;
				SV **svp = hv_fetch(hv, (char *)&ni, sizeof(int),
					0);
				if(svp && *svp) {
					ind = SvIV(*svp) - 1;
					while(ind>=0) {
						double dist = 0;
						double dist2;
						double tmp;
						double func;
						loop(nc) %{
							tmp =
							   ($coords() -
							    $coords(np => ind));
							dist += tmp * tmp;
						%}
						dist = sqrt(1/(sqrt(dist)+d));
						func = c * dist;
						dist2 = dist * dist;
						func += b * dist2;
						dist2 *= dist2;
						func += a * dist2;
						loop(nc) %{
							tmp =
							   ($coords() -
							    $coords(np => ind));
							$vecs() -=
								func * tmp;
							$vecs(np => ind) +=
								func * tmp;
						%}
						ind = $links(np => ind);
					}
				}
			}
			}
			}
			/* Store new */
			SV **svp = hv_fetch(hv, (char *)&index, sizeof(index), 1);
			if(!svp || !*svp)
				$CROAK("Invalid sv from hvfetch");
			SV *sv = *svp;
			int npv;
			if(SvOK(sv) && (npv = SvIV(sv))) {
				npv --;
				$links() = $links(np => npv);
				$links(np => npv) = np;
			} else {
				sv_setiv(sv,np+1);
				$links() = -1;
			}
		%}
		hv_undef(hv);
	', Doc => '
=for ref

Repulsive potential for molecule-like constructs.

C<repulse> uses a hash table of cubes to quickly calculate
a repulsive force that vanishes at infinity for many
objects. For use by the module L<PDL::Graphics::TriD::MathGraph>.
For definition of the potential, see the actual function.
'
);

pp_def(
	'attract',
	GenericTypes => ['F','D'],
	Pars => 'coords(nc,np);
		int from(nl);
		int to(nl);
		strength(nl);
		[o]vecs(nc,np);',
	OtherPars => '
		double m;
		double ms;
	',
	Code => '
		double m = $COMP(m);
		double ms = $COMP(ms);
		loop(nc,np) %{ $vecs() = 0; %}
		loop(nl) %{
			int f = $from();
			int t = $to();
			double s = $strength();
			double dist = 0;
			double tmp;
			loop(nc) %{
				tmp = $coords(np => f) -
					$coords(np => t);
				dist += tmp * tmp;
			%}
			s *= ms * dist + m * sqrt(dist);
			loop(nc) %{
				tmp = $coords(np => f) -
					$coords(np => t);
				$vecs(np => f) -= tmp * s;
				$vecs(np => t) += tmp * s;
			%}
		%}
	', Doc => '
=for ref

Attractive potential for molecule-like constructs.

C<attract> is used to calculate
an attractive force for many
objects, of which some attract each other (in a way
like molecular bonds).
For use by the module L<PDL::Graphics::TriD::MathGraph>.
For definition of the potential, see the actual function.
'
);

sub trid {
	my ($par,$ind) = @_;
	join ',', map {"\$$par($ind => $_)"} (0..2);
}

pp_def('vrmlcoordsvert',
	Pars => 'vertices(n=3)',
	OtherPars => 	'char* space; PerlIO *fp',
	GenericTypes => ['F','D'],
	Code => q@
		 PDL_Byte *buf, *bp;
		 char *spc = $COMP(space);
		 char formchar = $TFD(' ','l');
		 char formatstr[25];
		 sprintf(formatstr,"%s%%.3%cf %%.3%cf %%.3%cf,\n",spc,
			formchar,formchar,formchar);
		broadcastloop %{
			PerlIO_printf($COMP(fp),formatstr,@.trid('vertices','n').');
		%}'
);

pp_addpm({At=>'Bot'},<<'EOD');

=head1 AUTHOR

Copyright (C) 2000 James P. Edwards
Copyright (C) 1997 Tuomas J. Lukka.
All rights reserved. There is no warranty. You are allowed
to redistribute this software / documentation under certain
conditions. For details, see the file COPYING in the PDL
distribution. If this file is separated from the PDL distribution,
the copyright notice should be included in the file.

=cut
EOD

pp_done();
